// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inbox.proto

#ifndef PROTOBUF_inbox_2eproto__INCLUDED
#define PROTOBUF_inbox_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_inbox_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsInboxItemInfoImpl();
void InitDefaultsInboxItemInfo();
void InitDefaultsInboxItemsImpl();
void InitDefaultsInboxItems();
inline void InitDefaults() {
  InitDefaultsInboxItemInfo();
  InitDefaultsInboxItems();
}
}  // namespace protobuf_inbox_2eproto
namespace inbox {
class InboxItemInfo;
class InboxItemInfoDefaultTypeInternal;
extern InboxItemInfoDefaultTypeInternal _InboxItemInfo_default_instance_;
class InboxItems;
class InboxItemsDefaultTypeInternal;
extern InboxItemsDefaultTypeInternal _InboxItems_default_instance_;
}  // namespace inbox
namespace inbox {

// ===================================================================

class InboxItemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inbox.InboxItemInfo) */ {
 public:
  InboxItemInfo();
  virtual ~InboxItemInfo();

  InboxItemInfo(const InboxItemInfo& from);

  inline InboxItemInfo& operator=(const InboxItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InboxItemInfo(InboxItemInfo&& from) noexcept
    : InboxItemInfo() {
    *this = ::std::move(from);
  }

  inline InboxItemInfo& operator=(InboxItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InboxItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InboxItemInfo* internal_default_instance() {
    return reinterpret_cast<const InboxItemInfo*>(
               &_InboxItemInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InboxItemInfo* other);
  friend void swap(InboxItemInfo& a, InboxItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InboxItemInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InboxItemInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InboxItemInfo& from);
  void MergeFrom(const InboxItemInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InboxItemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .common.UniqueId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::common::UniqueId& id() const;
  ::common::UniqueId* release_id();
  ::common::UniqueId* mutable_id();
  void set_allocated_id(::common::UniqueId* id);

  // @@protoc_insertion_point(class_scope:inbox.InboxItemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::common::UniqueId* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_inbox_2eproto::TableStruct;
  friend void ::protobuf_inbox_2eproto::InitDefaultsInboxItemInfoImpl();
};
// -------------------------------------------------------------------

class InboxItems : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inbox.InboxItems) */ {
 public:
  InboxItems();
  virtual ~InboxItems();

  InboxItems(const InboxItems& from);

  inline InboxItems& operator=(const InboxItems& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InboxItems(InboxItems&& from) noexcept
    : InboxItems() {
    *this = ::std::move(from);
  }

  inline InboxItems& operator=(InboxItems&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InboxItems& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InboxItems* internal_default_instance() {
    return reinterpret_cast<const InboxItems*>(
               &_InboxItems_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(InboxItems* other);
  friend void swap(InboxItems& a, InboxItems& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InboxItems* New() const PROTOBUF_FINAL { return New(NULL); }

  InboxItems* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InboxItems& from);
  void MergeFrom(const InboxItems& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InboxItems* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inbox.InboxItemInfo items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::inbox::InboxItemInfo& items(int index) const;
  ::inbox::InboxItemInfo* mutable_items(int index);
  ::inbox::InboxItemInfo* add_items();
  ::google::protobuf::RepeatedPtrField< ::inbox::InboxItemInfo >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::inbox::InboxItemInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:inbox.InboxItems)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::inbox::InboxItemInfo > items_;
  mutable int _cached_size_;
  friend struct ::protobuf_inbox_2eproto::TableStruct;
  friend void ::protobuf_inbox_2eproto::InitDefaultsInboxItemsImpl();
};
// ===================================================================

class InboxService_Stub;

class InboxService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline InboxService() {};
 public:
  virtual ~InboxService();

  typedef InboxService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetInbox(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::inbox::InboxItems* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteItem(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void EditItem(::google::protobuf::RpcController* controller,
                       const ::inbox::InboxItemInfo* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void AddItem(::google::protobuf::RpcController* controller,
                       const ::inbox::InboxItemInfo* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InboxService);
};

class InboxService_Stub : public InboxService {
 public:
  InboxService_Stub(::google::protobuf::RpcChannel* channel);
  InboxService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~InboxService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements InboxService ------------------------------------------

  void GetInbox(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::inbox::InboxItems* response,
                       ::google::protobuf::Closure* done);
  void DeleteItem(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void EditItem(::google::protobuf::RpcController* controller,
                       const ::inbox::InboxItemInfo* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void AddItem(::google::protobuf::RpcController* controller,
                       const ::inbox::InboxItemInfo* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InboxService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InboxItemInfo

// .common.UniqueId id = 1;
inline bool InboxItemInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::UniqueId& InboxItemInfo::id() const {
  const ::common::UniqueId* p = id_;
  // @@protoc_insertion_point(field_get:inbox.InboxItemInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* InboxItemInfo::release_id() {
  // @@protoc_insertion_point(field_release:inbox.InboxItemInfo.id)
  
  ::common::UniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::UniqueId* InboxItemInfo::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:inbox.InboxItemInfo.id)
  return id_;
}
inline void InboxItemInfo::set_allocated_id(::common::UniqueId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:inbox.InboxItemInfo.id)
}

// string text = 2;
inline void InboxItemInfo::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InboxItemInfo::text() const {
  // @@protoc_insertion_point(field_get:inbox.InboxItemInfo.text)
  return text_.GetNoArena();
}
inline void InboxItemInfo::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inbox.InboxItemInfo.text)
}
#if LANG_CXX11
inline void InboxItemInfo::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inbox.InboxItemInfo.text)
}
#endif
inline void InboxItemInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inbox.InboxItemInfo.text)
}
inline void InboxItemInfo::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inbox.InboxItemInfo.text)
}
inline ::std::string* InboxItemInfo::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:inbox.InboxItemInfo.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InboxItemInfo::release_text() {
  // @@protoc_insertion_point(field_release:inbox.InboxItemInfo.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InboxItemInfo::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:inbox.InboxItemInfo.text)
}

// -------------------------------------------------------------------

// InboxItems

// repeated .inbox.InboxItemInfo items = 1;
inline int InboxItems::items_size() const {
  return items_.size();
}
inline void InboxItems::clear_items() {
  items_.Clear();
}
inline const ::inbox::InboxItemInfo& InboxItems::items(int index) const {
  // @@protoc_insertion_point(field_get:inbox.InboxItems.items)
  return items_.Get(index);
}
inline ::inbox::InboxItemInfo* InboxItems::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:inbox.InboxItems.items)
  return items_.Mutable(index);
}
inline ::inbox::InboxItemInfo* InboxItems::add_items() {
  // @@protoc_insertion_point(field_add:inbox.InboxItems.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::inbox::InboxItemInfo >*
InboxItems::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:inbox.InboxItems.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::inbox::InboxItemInfo >&
InboxItems::items() const {
  // @@protoc_insertion_point(field_list:inbox.InboxItems.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inbox_2eproto__INCLUDED
