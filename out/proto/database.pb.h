// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#ifndef PROTOBUF_database_2eproto__INCLUDED
#define PROTOBUF_database_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_database_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDocumentHeaderImpl();
void InitDefaultsDocumentHeader();
void InitDefaultsDocumentImpl();
void InitDefaultsDocument();
void InitDefaultsQueryElementImpl();
void InitDefaultsQueryElement();
void InitDefaultsDocumentQueryImpl();
void InitDefaultsDocumentQuery();
void InitDefaultsDocumentsImpl();
void InitDefaultsDocuments();
void InitDefaultsFullTextSearchResultEntryImpl();
void InitDefaultsFullTextSearchResultEntry();
void InitDefaultsFullTextSearchResultImpl();
void InitDefaultsFullTextSearchResult();
void InitDefaultsFullTextSearchParametersImpl();
void InitDefaultsFullTextSearchParameters();
void InitDefaultsAddDocumentRequestImpl();
void InitDefaultsAddDocumentRequest();
inline void InitDefaults() {
  InitDefaultsDocumentHeader();
  InitDefaultsDocument();
  InitDefaultsQueryElement();
  InitDefaultsDocumentQuery();
  InitDefaultsDocuments();
  InitDefaultsFullTextSearchResultEntry();
  InitDefaultsFullTextSearchResult();
  InitDefaultsFullTextSearchParameters();
  InitDefaultsAddDocumentRequest();
}
}  // namespace protobuf_database_2eproto
namespace database {
class AddDocumentRequest;
class AddDocumentRequestDefaultTypeInternal;
extern AddDocumentRequestDefaultTypeInternal _AddDocumentRequest_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class DocumentHeader;
class DocumentHeaderDefaultTypeInternal;
extern DocumentHeaderDefaultTypeInternal _DocumentHeader_default_instance_;
class DocumentQuery;
class DocumentQueryDefaultTypeInternal;
extern DocumentQueryDefaultTypeInternal _DocumentQuery_default_instance_;
class Documents;
class DocumentsDefaultTypeInternal;
extern DocumentsDefaultTypeInternal _Documents_default_instance_;
class FullTextSearchParameters;
class FullTextSearchParametersDefaultTypeInternal;
extern FullTextSearchParametersDefaultTypeInternal _FullTextSearchParameters_default_instance_;
class FullTextSearchResult;
class FullTextSearchResultDefaultTypeInternal;
extern FullTextSearchResultDefaultTypeInternal _FullTextSearchResult_default_instance_;
class FullTextSearchResultEntry;
class FullTextSearchResultEntryDefaultTypeInternal;
extern FullTextSearchResultEntryDefaultTypeInternal _FullTextSearchResultEntry_default_instance_;
class QueryElement;
class QueryElementDefaultTypeInternal;
extern QueryElementDefaultTypeInternal _QueryElement_default_instance_;
}  // namespace database
namespace database {

enum QueryElementType {
  Equals = 0,
  Less = 1,
  Greater = 2,
  Between = 3,
  QueryElementType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  QueryElementType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool QueryElementType_IsValid(int value);
const QueryElementType QueryElementType_MIN = Equals;
const QueryElementType QueryElementType_MAX = Between;
const int QueryElementType_ARRAYSIZE = QueryElementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryElementType_descriptor();
inline const ::std::string& QueryElementType_Name(QueryElementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryElementType_descriptor(), value);
}
inline bool QueryElementType_Parse(
    const ::std::string& name, QueryElementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryElementType>(
    QueryElementType_descriptor(), name, value);
}
// ===================================================================

class DocumentHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.DocumentHeader) */ {
 public:
  DocumentHeader();
  virtual ~DocumentHeader();

  DocumentHeader(const DocumentHeader& from);

  inline DocumentHeader& operator=(const DocumentHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentHeader(DocumentHeader&& from) noexcept
    : DocumentHeader() {
    *this = ::std::move(from);
  }

  inline DocumentHeader& operator=(DocumentHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentHeader* internal_default_instance() {
    return reinterpret_cast<const DocumentHeader*>(
               &_DocumentHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DocumentHeader* other);
  friend void swap(DocumentHeader& a, DocumentHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentHeader& from);
  void MergeFrom(const DocumentHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string category = 2;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // @@protoc_insertion_point(class_scope:database.DocumentHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsDocumentHeaderImpl();
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Document* other);
  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const PROTOBUF_FINAL { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .database.DocumentHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::database::DocumentHeader& header() const;
  ::database::DocumentHeader* release_header();
  ::database::DocumentHeader* mutable_header();
  void set_allocated_header(::database::DocumentHeader* header);

  // @@protoc_insertion_point(class_scope:database.Document)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::database::DocumentHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsDocumentImpl();
};
// -------------------------------------------------------------------

class QueryElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.QueryElement) */ {
 public:
  QueryElement();
  virtual ~QueryElement();

  QueryElement(const QueryElement& from);

  inline QueryElement& operator=(const QueryElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryElement(QueryElement&& from) noexcept
    : QueryElement() {
    *this = ::std::move(from);
  }

  inline QueryElement& operator=(QueryElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryElement* internal_default_instance() {
    return reinterpret_cast<const QueryElement*>(
               &_QueryElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(QueryElement* other);
  friend void swap(QueryElement& a, QueryElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryElement* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryElement& from);
  void MergeFrom(const QueryElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string value2 = 3;
  void clear_value2();
  static const int kValue2FieldNumber = 3;
  const ::std::string& value2() const;
  void set_value2(const ::std::string& value);
  #if LANG_CXX11
  void set_value2(::std::string&& value);
  #endif
  void set_value2(const char* value);
  void set_value2(const char* value, size_t size);
  ::std::string* mutable_value2();
  ::std::string* release_value2();
  void set_allocated_value2(::std::string* value2);

  // .database.QueryElementType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::database::QueryElementType type() const;
  void set_type(::database::QueryElementType value);

  // @@protoc_insertion_point(class_scope:database.QueryElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr value2_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsQueryElementImpl();
};
// -------------------------------------------------------------------

class DocumentQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.DocumentQuery) */ {
 public:
  DocumentQuery();
  virtual ~DocumentQuery();

  DocumentQuery(const DocumentQuery& from);

  inline DocumentQuery& operator=(const DocumentQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentQuery(DocumentQuery&& from) noexcept
    : DocumentQuery() {
    *this = ::std::move(from);
  }

  inline DocumentQuery& operator=(DocumentQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentQuery* internal_default_instance() {
    return reinterpret_cast<const DocumentQuery*>(
               &_DocumentQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DocumentQuery* other);
  friend void swap(DocumentQuery& a, DocumentQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentQuery& from);
  void MergeFrom(const DocumentQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .database.QueryElement query = 1;
  int query_size() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::database::QueryElement& query(int index) const;
  ::database::QueryElement* mutable_query(int index);
  ::database::QueryElement* add_query();
  ::google::protobuf::RepeatedPtrField< ::database::QueryElement >*
      mutable_query();
  const ::google::protobuf::RepeatedPtrField< ::database::QueryElement >&
      query() const;

  // string category = 2;
  void clear_category();
  static const int kCategoryFieldNumber = 2;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // @@protoc_insertion_point(class_scope:database.DocumentQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::database::QueryElement > query_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsDocumentQueryImpl();
};
// -------------------------------------------------------------------

class Documents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.Documents) */ {
 public:
  Documents();
  virtual ~Documents();

  Documents(const Documents& from);

  inline Documents& operator=(const Documents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Documents(Documents&& from) noexcept
    : Documents() {
    *this = ::std::move(from);
  }

  inline Documents& operator=(Documents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Documents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Documents* internal_default_instance() {
    return reinterpret_cast<const Documents*>(
               &_Documents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Documents* other);
  friend void swap(Documents& a, Documents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Documents* New() const PROTOBUF_FINAL { return New(NULL); }

  Documents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Documents& from);
  void MergeFrom(const Documents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Documents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .database.Document result = 1;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::database::Document& result(int index) const;
  ::database::Document* mutable_result(int index);
  ::database::Document* add_result();
  ::google::protobuf::RepeatedPtrField< ::database::Document >*
      mutable_result();
  const ::google::protobuf::RepeatedPtrField< ::database::Document >&
      result() const;

  // @@protoc_insertion_point(class_scope:database.Documents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::database::Document > result_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsDocumentsImpl();
};
// -------------------------------------------------------------------

class FullTextSearchResultEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.FullTextSearchResultEntry) */ {
 public:
  FullTextSearchResultEntry();
  virtual ~FullTextSearchResultEntry();

  FullTextSearchResultEntry(const FullTextSearchResultEntry& from);

  inline FullTextSearchResultEntry& operator=(const FullTextSearchResultEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullTextSearchResultEntry(FullTextSearchResultEntry&& from) noexcept
    : FullTextSearchResultEntry() {
    *this = ::std::move(from);
  }

  inline FullTextSearchResultEntry& operator=(FullTextSearchResultEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FullTextSearchResultEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullTextSearchResultEntry* internal_default_instance() {
    return reinterpret_cast<const FullTextSearchResultEntry*>(
               &_FullTextSearchResultEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FullTextSearchResultEntry* other);
  friend void swap(FullTextSearchResultEntry& a, FullTextSearchResultEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullTextSearchResultEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  FullTextSearchResultEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FullTextSearchResultEntry& from);
  void MergeFrom(const FullTextSearchResultEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FullTextSearchResultEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .database.Document doc = 1;
  bool has_doc() const;
  void clear_doc();
  static const int kDocFieldNumber = 1;
  const ::database::Document& doc() const;
  ::database::Document* release_doc();
  ::database::Document* mutable_doc();
  void set_allocated_doc(::database::Document* doc);

  // double match = 2;
  void clear_match();
  static const int kMatchFieldNumber = 2;
  double match() const;
  void set_match(double value);

  // @@protoc_insertion_point(class_scope:database.FullTextSearchResultEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::database::Document* doc_;
  double match_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsFullTextSearchResultEntryImpl();
};
// -------------------------------------------------------------------

class FullTextSearchResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.FullTextSearchResult) */ {
 public:
  FullTextSearchResult();
  virtual ~FullTextSearchResult();

  FullTextSearchResult(const FullTextSearchResult& from);

  inline FullTextSearchResult& operator=(const FullTextSearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullTextSearchResult(FullTextSearchResult&& from) noexcept
    : FullTextSearchResult() {
    *this = ::std::move(from);
  }

  inline FullTextSearchResult& operator=(FullTextSearchResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FullTextSearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullTextSearchResult* internal_default_instance() {
    return reinterpret_cast<const FullTextSearchResult*>(
               &_FullTextSearchResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FullTextSearchResult* other);
  friend void swap(FullTextSearchResult& a, FullTextSearchResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullTextSearchResult* New() const PROTOBUF_FINAL { return New(NULL); }

  FullTextSearchResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FullTextSearchResult& from);
  void MergeFrom(const FullTextSearchResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FullTextSearchResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .database.FullTextSearchResultEntry result = 1;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::database::FullTextSearchResultEntry& result(int index) const;
  ::database::FullTextSearchResultEntry* mutable_result(int index);
  ::database::FullTextSearchResultEntry* add_result();
  ::google::protobuf::RepeatedPtrField< ::database::FullTextSearchResultEntry >*
      mutable_result();
  const ::google::protobuf::RepeatedPtrField< ::database::FullTextSearchResultEntry >&
      result() const;

  // @@protoc_insertion_point(class_scope:database.FullTextSearchResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::database::FullTextSearchResultEntry > result_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsFullTextSearchResultImpl();
};
// -------------------------------------------------------------------

class FullTextSearchParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.FullTextSearchParameters) */ {
 public:
  FullTextSearchParameters();
  virtual ~FullTextSearchParameters();

  FullTextSearchParameters(const FullTextSearchParameters& from);

  inline FullTextSearchParameters& operator=(const FullTextSearchParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullTextSearchParameters(FullTextSearchParameters&& from) noexcept
    : FullTextSearchParameters() {
    *this = ::std::move(from);
  }

  inline FullTextSearchParameters& operator=(FullTextSearchParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FullTextSearchParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullTextSearchParameters* internal_default_instance() {
    return reinterpret_cast<const FullTextSearchParameters*>(
               &_FullTextSearchParameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FullTextSearchParameters* other);
  friend void swap(FullTextSearchParameters& a, FullTextSearchParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullTextSearchParameters* New() const PROTOBUF_FINAL { return New(NULL); }

  FullTextSearchParameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FullTextSearchParameters& from);
  void MergeFrom(const FullTextSearchParameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FullTextSearchParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fulltext = 1;
  void clear_fulltext();
  static const int kFulltextFieldNumber = 1;
  const ::std::string& fulltext() const;
  void set_fulltext(const ::std::string& value);
  #if LANG_CXX11
  void set_fulltext(::std::string&& value);
  #endif
  void set_fulltext(const char* value);
  void set_fulltext(const char* value, size_t size);
  ::std::string* mutable_fulltext();
  ::std::string* release_fulltext();
  void set_allocated_fulltext(::std::string* fulltext);

  // @@protoc_insertion_point(class_scope:database.FullTextSearchParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fulltext_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsFullTextSearchParametersImpl();
};
// -------------------------------------------------------------------

class AddDocumentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database.AddDocumentRequest) */ {
 public:
  AddDocumentRequest();
  virtual ~AddDocumentRequest();

  AddDocumentRequest(const AddDocumentRequest& from);

  inline AddDocumentRequest& operator=(const AddDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddDocumentRequest(AddDocumentRequest&& from) noexcept
    : AddDocumentRequest() {
    *this = ::std::move(from);
  }

  inline AddDocumentRequest& operator=(AddDocumentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDocumentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const AddDocumentRequest*>(
               &_AddDocumentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AddDocumentRequest* other);
  friend void swap(AddDocumentRequest& a, AddDocumentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddDocumentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddDocumentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddDocumentRequest& from);
  void MergeFrom(const AddDocumentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddDocumentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .database.Document doc = 1;
  bool has_doc() const;
  void clear_doc();
  static const int kDocFieldNumber = 1;
  const ::database::Document& doc() const;
  ::database::Document* release_doc();
  ::database::Document* mutable_doc();
  void set_allocated_doc(::database::Document* doc);

  // bool useProvidedId = 2;
  void clear_useprovidedid();
  static const int kUseProvidedIdFieldNumber = 2;
  bool useprovidedid() const;
  void set_useprovidedid(bool value);

  // @@protoc_insertion_point(class_scope:database.AddDocumentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::database::Document* doc_;
  bool useprovidedid_;
  mutable int _cached_size_;
  friend struct ::protobuf_database_2eproto::TableStruct;
  friend void ::protobuf_database_2eproto::InitDefaultsAddDocumentRequestImpl();
};
// ===================================================================

class DatabaseService_Stub;

class DatabaseService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DatabaseService() {};
 public:
  virtual ~DatabaseService();

  typedef DatabaseService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetDocument(::google::protobuf::RpcController* controller,
                       const ::database::DocumentHeader* request,
                       ::database::Documents* response,
                       ::google::protobuf::Closure* done);
  virtual void SearchDocuments(::google::protobuf::RpcController* controller,
                       const ::database::DocumentQuery* request,
                       ::database::Documents* response,
                       ::google::protobuf::Closure* done);
  virtual void FullTextSearch(::google::protobuf::RpcController* controller,
                       const ::database::FullTextSearchParameters* request,
                       ::database::FullTextSearchResult* response,
                       ::google::protobuf::Closure* done);
  virtual void AddDocument(::google::protobuf::RpcController* controller,
                       const ::database::AddDocumentRequest* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  virtual void ModifyDocument(::google::protobuf::RpcController* controller,
                       const ::database::Document* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteDocument(::google::protobuf::RpcController* controller,
                       const ::database::DocumentHeader* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void Fetch(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::database::Documents* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DatabaseService);
};

class DatabaseService_Stub : public DatabaseService {
 public:
  DatabaseService_Stub(::google::protobuf::RpcChannel* channel);
  DatabaseService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DatabaseService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements DatabaseService ------------------------------------------

  void GetDocument(::google::protobuf::RpcController* controller,
                       const ::database::DocumentHeader* request,
                       ::database::Documents* response,
                       ::google::protobuf::Closure* done);
  void SearchDocuments(::google::protobuf::RpcController* controller,
                       const ::database::DocumentQuery* request,
                       ::database::Documents* response,
                       ::google::protobuf::Closure* done);
  void FullTextSearch(::google::protobuf::RpcController* controller,
                       const ::database::FullTextSearchParameters* request,
                       ::database::FullTextSearchResult* response,
                       ::google::protobuf::Closure* done);
  void AddDocument(::google::protobuf::RpcController* controller,
                       const ::database::AddDocumentRequest* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  void ModifyDocument(::google::protobuf::RpcController* controller,
                       const ::database::Document* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void DeleteDocument(::google::protobuf::RpcController* controller,
                       const ::database::DocumentHeader* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void Fetch(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::database::Documents* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DatabaseService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DocumentHeader

// string key = 1;
inline void DocumentHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentHeader::key() const {
  // @@protoc_insertion_point(field_get:database.DocumentHeader.key)
  return key_.GetNoArena();
}
inline void DocumentHeader::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.DocumentHeader.key)
}
#if LANG_CXX11
inline void DocumentHeader::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.DocumentHeader.key)
}
#endif
inline void DocumentHeader::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.DocumentHeader.key)
}
inline void DocumentHeader::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.DocumentHeader.key)
}
inline ::std::string* DocumentHeader::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:database.DocumentHeader.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentHeader::release_key() {
  // @@protoc_insertion_point(field_release:database.DocumentHeader.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:database.DocumentHeader.key)
}

// string category = 2;
inline void DocumentHeader::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentHeader::category() const {
  // @@protoc_insertion_point(field_get:database.DocumentHeader.category)
  return category_.GetNoArena();
}
inline void DocumentHeader::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.DocumentHeader.category)
}
#if LANG_CXX11
inline void DocumentHeader::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.DocumentHeader.category)
}
#endif
inline void DocumentHeader::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.DocumentHeader.category)
}
inline void DocumentHeader::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.DocumentHeader.category)
}
inline ::std::string* DocumentHeader::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:database.DocumentHeader.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentHeader::release_category() {
  // @@protoc_insertion_point(field_release:database.DocumentHeader.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentHeader::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:database.DocumentHeader.category)
}

// -------------------------------------------------------------------

// Document

// .database.DocumentHeader header = 1;
inline bool Document::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Document::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::database::DocumentHeader& Document::header() const {
  const ::database::DocumentHeader* p = header_;
  // @@protoc_insertion_point(field_get:database.Document.header)
  return p != NULL ? *p : *reinterpret_cast<const ::database::DocumentHeader*>(
      &::database::_DocumentHeader_default_instance_);
}
inline ::database::DocumentHeader* Document::release_header() {
  // @@protoc_insertion_point(field_release:database.Document.header)
  
  ::database::DocumentHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::database::DocumentHeader* Document::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::database::DocumentHeader;
  }
  // @@protoc_insertion_point(field_mutable:database.Document.header)
  return header_;
}
inline void Document::set_allocated_header(::database::DocumentHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:database.Document.header)
}

// string body = 2;
inline void Document::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Document::body() const {
  // @@protoc_insertion_point(field_get:database.Document.body)
  return body_.GetNoArena();
}
inline void Document::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.Document.body)
}
#if LANG_CXX11
inline void Document::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.Document.body)
}
#endif
inline void Document::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.Document.body)
}
inline void Document::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.Document.body)
}
inline ::std::string* Document::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:database.Document.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_body() {
  // @@protoc_insertion_point(field_release:database.Document.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:database.Document.body)
}

// -------------------------------------------------------------------

// QueryElement

// string key = 1;
inline void QueryElement::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryElement::key() const {
  // @@protoc_insertion_point(field_get:database.QueryElement.key)
  return key_.GetNoArena();
}
inline void QueryElement::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.QueryElement.key)
}
#if LANG_CXX11
inline void QueryElement::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.QueryElement.key)
}
#endif
inline void QueryElement::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.QueryElement.key)
}
inline void QueryElement::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.QueryElement.key)
}
inline ::std::string* QueryElement::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:database.QueryElement.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryElement::release_key() {
  // @@protoc_insertion_point(field_release:database.QueryElement.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryElement::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:database.QueryElement.key)
}

// string value = 2;
inline void QueryElement::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryElement::value() const {
  // @@protoc_insertion_point(field_get:database.QueryElement.value)
  return value_.GetNoArena();
}
inline void QueryElement::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.QueryElement.value)
}
#if LANG_CXX11
inline void QueryElement::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.QueryElement.value)
}
#endif
inline void QueryElement::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.QueryElement.value)
}
inline void QueryElement::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.QueryElement.value)
}
inline ::std::string* QueryElement::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:database.QueryElement.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryElement::release_value() {
  // @@protoc_insertion_point(field_release:database.QueryElement.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryElement::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:database.QueryElement.value)
}

// string value2 = 3;
inline void QueryElement::clear_value2() {
  value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryElement::value2() const {
  // @@protoc_insertion_point(field_get:database.QueryElement.value2)
  return value2_.GetNoArena();
}
inline void QueryElement::set_value2(const ::std::string& value) {
  
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.QueryElement.value2)
}
#if LANG_CXX11
inline void QueryElement::set_value2(::std::string&& value) {
  
  value2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.QueryElement.value2)
}
#endif
inline void QueryElement::set_value2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.QueryElement.value2)
}
inline void QueryElement::set_value2(const char* value, size_t size) {
  
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.QueryElement.value2)
}
inline ::std::string* QueryElement::mutable_value2() {
  
  // @@protoc_insertion_point(field_mutable:database.QueryElement.value2)
  return value2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryElement::release_value2() {
  // @@protoc_insertion_point(field_release:database.QueryElement.value2)
  
  return value2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryElement::set_allocated_value2(::std::string* value2) {
  if (value2 != NULL) {
    
  } else {
    
  }
  value2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:database.QueryElement.value2)
}

// .database.QueryElementType type = 4;
inline void QueryElement::clear_type() {
  type_ = 0;
}
inline ::database::QueryElementType QueryElement::type() const {
  // @@protoc_insertion_point(field_get:database.QueryElement.type)
  return static_cast< ::database::QueryElementType >(type_);
}
inline void QueryElement::set_type(::database::QueryElementType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:database.QueryElement.type)
}

// -------------------------------------------------------------------

// DocumentQuery

// repeated .database.QueryElement query = 1;
inline int DocumentQuery::query_size() const {
  return query_.size();
}
inline void DocumentQuery::clear_query() {
  query_.Clear();
}
inline const ::database::QueryElement& DocumentQuery::query(int index) const {
  // @@protoc_insertion_point(field_get:database.DocumentQuery.query)
  return query_.Get(index);
}
inline ::database::QueryElement* DocumentQuery::mutable_query(int index) {
  // @@protoc_insertion_point(field_mutable:database.DocumentQuery.query)
  return query_.Mutable(index);
}
inline ::database::QueryElement* DocumentQuery::add_query() {
  // @@protoc_insertion_point(field_add:database.DocumentQuery.query)
  return query_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::database::QueryElement >*
DocumentQuery::mutable_query() {
  // @@protoc_insertion_point(field_mutable_list:database.DocumentQuery.query)
  return &query_;
}
inline const ::google::protobuf::RepeatedPtrField< ::database::QueryElement >&
DocumentQuery::query() const {
  // @@protoc_insertion_point(field_list:database.DocumentQuery.query)
  return query_;
}

// string category = 2;
inline void DocumentQuery::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentQuery::category() const {
  // @@protoc_insertion_point(field_get:database.DocumentQuery.category)
  return category_.GetNoArena();
}
inline void DocumentQuery::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.DocumentQuery.category)
}
#if LANG_CXX11
inline void DocumentQuery::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.DocumentQuery.category)
}
#endif
inline void DocumentQuery::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.DocumentQuery.category)
}
inline void DocumentQuery::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.DocumentQuery.category)
}
inline ::std::string* DocumentQuery::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:database.DocumentQuery.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentQuery::release_category() {
  // @@protoc_insertion_point(field_release:database.DocumentQuery.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentQuery::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:database.DocumentQuery.category)
}

// -------------------------------------------------------------------

// Documents

// repeated .database.Document result = 1;
inline int Documents::result_size() const {
  return result_.size();
}
inline void Documents::clear_result() {
  result_.Clear();
}
inline const ::database::Document& Documents::result(int index) const {
  // @@protoc_insertion_point(field_get:database.Documents.result)
  return result_.Get(index);
}
inline ::database::Document* Documents::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:database.Documents.result)
  return result_.Mutable(index);
}
inline ::database::Document* Documents::add_result() {
  // @@protoc_insertion_point(field_add:database.Documents.result)
  return result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::database::Document >*
Documents::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:database.Documents.result)
  return &result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::database::Document >&
Documents::result() const {
  // @@protoc_insertion_point(field_list:database.Documents.result)
  return result_;
}

// -------------------------------------------------------------------

// FullTextSearchResultEntry

// .database.Document doc = 1;
inline bool FullTextSearchResultEntry::has_doc() const {
  return this != internal_default_instance() && doc_ != NULL;
}
inline void FullTextSearchResultEntry::clear_doc() {
  if (GetArenaNoVirtual() == NULL && doc_ != NULL) {
    delete doc_;
  }
  doc_ = NULL;
}
inline const ::database::Document& FullTextSearchResultEntry::doc() const {
  const ::database::Document* p = doc_;
  // @@protoc_insertion_point(field_get:database.FullTextSearchResultEntry.doc)
  return p != NULL ? *p : *reinterpret_cast<const ::database::Document*>(
      &::database::_Document_default_instance_);
}
inline ::database::Document* FullTextSearchResultEntry::release_doc() {
  // @@protoc_insertion_point(field_release:database.FullTextSearchResultEntry.doc)
  
  ::database::Document* temp = doc_;
  doc_ = NULL;
  return temp;
}
inline ::database::Document* FullTextSearchResultEntry::mutable_doc() {
  
  if (doc_ == NULL) {
    doc_ = new ::database::Document;
  }
  // @@protoc_insertion_point(field_mutable:database.FullTextSearchResultEntry.doc)
  return doc_;
}
inline void FullTextSearchResultEntry::set_allocated_doc(::database::Document* doc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_;
  }
  if (doc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      doc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:database.FullTextSearchResultEntry.doc)
}

// double match = 2;
inline void FullTextSearchResultEntry::clear_match() {
  match_ = 0;
}
inline double FullTextSearchResultEntry::match() const {
  // @@protoc_insertion_point(field_get:database.FullTextSearchResultEntry.match)
  return match_;
}
inline void FullTextSearchResultEntry::set_match(double value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:database.FullTextSearchResultEntry.match)
}

// -------------------------------------------------------------------

// FullTextSearchResult

// repeated .database.FullTextSearchResultEntry result = 1;
inline int FullTextSearchResult::result_size() const {
  return result_.size();
}
inline void FullTextSearchResult::clear_result() {
  result_.Clear();
}
inline const ::database::FullTextSearchResultEntry& FullTextSearchResult::result(int index) const {
  // @@protoc_insertion_point(field_get:database.FullTextSearchResult.result)
  return result_.Get(index);
}
inline ::database::FullTextSearchResultEntry* FullTextSearchResult::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:database.FullTextSearchResult.result)
  return result_.Mutable(index);
}
inline ::database::FullTextSearchResultEntry* FullTextSearchResult::add_result() {
  // @@protoc_insertion_point(field_add:database.FullTextSearchResult.result)
  return result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::database::FullTextSearchResultEntry >*
FullTextSearchResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:database.FullTextSearchResult.result)
  return &result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::database::FullTextSearchResultEntry >&
FullTextSearchResult::result() const {
  // @@protoc_insertion_point(field_list:database.FullTextSearchResult.result)
  return result_;
}

// -------------------------------------------------------------------

// FullTextSearchParameters

// string fulltext = 1;
inline void FullTextSearchParameters::clear_fulltext() {
  fulltext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FullTextSearchParameters::fulltext() const {
  // @@protoc_insertion_point(field_get:database.FullTextSearchParameters.fulltext)
  return fulltext_.GetNoArena();
}
inline void FullTextSearchParameters::set_fulltext(const ::std::string& value) {
  
  fulltext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.FullTextSearchParameters.fulltext)
}
#if LANG_CXX11
inline void FullTextSearchParameters::set_fulltext(::std::string&& value) {
  
  fulltext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.FullTextSearchParameters.fulltext)
}
#endif
inline void FullTextSearchParameters::set_fulltext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fulltext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.FullTextSearchParameters.fulltext)
}
inline void FullTextSearchParameters::set_fulltext(const char* value, size_t size) {
  
  fulltext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.FullTextSearchParameters.fulltext)
}
inline ::std::string* FullTextSearchParameters::mutable_fulltext() {
  
  // @@protoc_insertion_point(field_mutable:database.FullTextSearchParameters.fulltext)
  return fulltext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FullTextSearchParameters::release_fulltext() {
  // @@protoc_insertion_point(field_release:database.FullTextSearchParameters.fulltext)
  
  return fulltext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FullTextSearchParameters::set_allocated_fulltext(::std::string* fulltext) {
  if (fulltext != NULL) {
    
  } else {
    
  }
  fulltext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fulltext);
  // @@protoc_insertion_point(field_set_allocated:database.FullTextSearchParameters.fulltext)
}

// -------------------------------------------------------------------

// AddDocumentRequest

// .database.Document doc = 1;
inline bool AddDocumentRequest::has_doc() const {
  return this != internal_default_instance() && doc_ != NULL;
}
inline void AddDocumentRequest::clear_doc() {
  if (GetArenaNoVirtual() == NULL && doc_ != NULL) {
    delete doc_;
  }
  doc_ = NULL;
}
inline const ::database::Document& AddDocumentRequest::doc() const {
  const ::database::Document* p = doc_;
  // @@protoc_insertion_point(field_get:database.AddDocumentRequest.doc)
  return p != NULL ? *p : *reinterpret_cast<const ::database::Document*>(
      &::database::_Document_default_instance_);
}
inline ::database::Document* AddDocumentRequest::release_doc() {
  // @@protoc_insertion_point(field_release:database.AddDocumentRequest.doc)
  
  ::database::Document* temp = doc_;
  doc_ = NULL;
  return temp;
}
inline ::database::Document* AddDocumentRequest::mutable_doc() {
  
  if (doc_ == NULL) {
    doc_ = new ::database::Document;
  }
  // @@protoc_insertion_point(field_mutable:database.AddDocumentRequest.doc)
  return doc_;
}
inline void AddDocumentRequest::set_allocated_doc(::database::Document* doc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_;
  }
  if (doc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      doc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:database.AddDocumentRequest.doc)
}

// bool useProvidedId = 2;
inline void AddDocumentRequest::clear_useprovidedid() {
  useprovidedid_ = false;
}
inline bool AddDocumentRequest::useprovidedid() const {
  // @@protoc_insertion_point(field_get:database.AddDocumentRequest.useProvidedId)
  return useprovidedid_;
}
inline void AddDocumentRequest::set_useprovidedid(bool value) {
  
  useprovidedid_ = value;
  // @@protoc_insertion_point(field_set:database.AddDocumentRequest.useProvidedId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace database

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::database::QueryElementType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::database::QueryElementType>() {
  return ::database::QueryElementType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_database_2eproto__INCLUDED
