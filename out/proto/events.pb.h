// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#ifndef PROTOBUF_events_2eproto__INCLUDED
#define PROTOBUF_events_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_events_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEventInfoImpl();
void InitDefaultsEventInfo();
void InitDefaultsEventsImpl();
void InitDefaultsEvents();
void InitDefaultsGetEventsRequestImpl();
void InitDefaultsGetEventsRequest();
inline void InitDefaults() {
  InitDefaultsEventInfo();
  InitDefaultsEvents();
  InitDefaultsGetEventsRequest();
}
}  // namespace protobuf_events_2eproto
namespace events {
class EventInfo;
class EventInfoDefaultTypeInternal;
extern EventInfoDefaultTypeInternal _EventInfo_default_instance_;
class Events;
class EventsDefaultTypeInternal;
extern EventsDefaultTypeInternal _Events_default_instance_;
class GetEventsRequest;
class GetEventsRequestDefaultTypeInternal;
extern GetEventsRequestDefaultTypeInternal _GetEventsRequest_default_instance_;
}  // namespace events
namespace events {

enum EventType {
  HistoryStarted = 0,
  ActionsUpdated = 1,
  ContainerUpdated = 2,
  CalendarUpdated = 3,
  GoalUpdated = 4,
  AffinitiesUpdated = 5,
  MeasurementUpdated = 6,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = HistoryStarted;
const EventType EventType_MAX = MeasurementUpdated;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class EventInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:events.EventInfo) */ {
 public:
  EventInfo();
  virtual ~EventInfo();

  EventInfo(const EventInfo& from);

  inline EventInfo& operator=(const EventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventInfo(EventInfo&& from) noexcept
    : EventInfo() {
    *this = ::std::move(from);
  }

  inline EventInfo& operator=(EventInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventInfo* internal_default_instance() {
    return reinterpret_cast<const EventInfo*>(
               &_EventInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EventInfo* other);
  friend void swap(EventInfo& a, EventInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  EventInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventInfo& from);
  void MergeFrom(const EventInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string container_name = 3;
  void clear_container_name();
  static const int kContainerNameFieldNumber = 3;
  const ::std::string& container_name() const;
  void set_container_name(const ::std::string& value);
  #if LANG_CXX11
  void set_container_name(::std::string&& value);
  #endif
  void set_container_name(const char* value);
  void set_container_name(const char* value, size_t size);
  ::std::string* mutable_container_name();
  ::std::string* release_container_name();
  void set_allocated_container_name(::std::string* container_name);

  // .common.UniqueId id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  const ::common::UniqueId& id() const;
  ::common::UniqueId* release_id();
  ::common::UniqueId* mutable_id();
  void set_allocated_id(::common::UniqueId* id);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .events.EventType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::events::EventType type() const;
  void set_type(::events::EventType value);

  // @@protoc_insertion_point(class_scope:events.EventInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr container_name_;
  ::common::UniqueId* id_;
  ::google::protobuf::int64 timestamp_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_events_2eproto::TableStruct;
  friend void ::protobuf_events_2eproto::InitDefaultsEventInfoImpl();
};
// -------------------------------------------------------------------

class Events : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:events.Events) */ {
 public:
  Events();
  virtual ~Events();

  Events(const Events& from);

  inline Events& operator=(const Events& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Events(Events&& from) noexcept
    : Events() {
    *this = ::std::move(from);
  }

  inline Events& operator=(Events&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Events& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Events* internal_default_instance() {
    return reinterpret_cast<const Events*>(
               &_Events_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Events* other);
  friend void swap(Events& a, Events& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Events* New() const PROTOBUF_FINAL { return New(NULL); }

  Events* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Events& from);
  void MergeFrom(const Events& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Events* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .events.EventInfo items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::events::EventInfo& items(int index) const;
  ::events::EventInfo* mutable_items(int index);
  ::events::EventInfo* add_items();
  ::google::protobuf::RepeatedPtrField< ::events::EventInfo >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::events::EventInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:events.Events)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::events::EventInfo > items_;
  mutable int _cached_size_;
  friend struct ::protobuf_events_2eproto::TableStruct;
  friend void ::protobuf_events_2eproto::InitDefaultsEventsImpl();
};
// -------------------------------------------------------------------

class GetEventsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:events.GetEventsRequest) */ {
 public:
  GetEventsRequest();
  virtual ~GetEventsRequest();

  GetEventsRequest(const GetEventsRequest& from);

  inline GetEventsRequest& operator=(const GetEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetEventsRequest(GetEventsRequest&& from) noexcept
    : GetEventsRequest() {
    *this = ::std::move(from);
  }

  inline GetEventsRequest& operator=(GetEventsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetEventsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEventsRequest* internal_default_instance() {
    return reinterpret_cast<const GetEventsRequest*>(
               &_GetEventsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetEventsRequest* other);
  friend void swap(GetEventsRequest& a, GetEventsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEventsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetEventsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetEventsRequest& from);
  void MergeFrom(const GetEventsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetEventsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestampFrom = 1;
  void clear_timestampfrom();
  static const int kTimestampFromFieldNumber = 1;
  ::google::protobuf::int64 timestampfrom() const;
  void set_timestampfrom(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:events.GetEventsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestampfrom_;
  mutable int _cached_size_;
  friend struct ::protobuf_events_2eproto::TableStruct;
  friend void ::protobuf_events_2eproto::InitDefaultsGetEventsRequestImpl();
};
// ===================================================================

class EventsService_Stub;

class EventsService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EventsService() {};
 public:
  virtual ~EventsService();

  typedef EventsService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetEvents(::google::protobuf::RpcController* controller,
                       const ::events::GetEventsRequest* request,
                       ::events::Events* response,
                       ::google::protobuf::Closure* done);
  virtual void PutEvent(::google::protobuf::RpcController* controller,
                       const ::events::EventInfo* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EventsService);
};

class EventsService_Stub : public EventsService {
 public:
  EventsService_Stub(::google::protobuf::RpcChannel* channel);
  EventsService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EventsService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EventsService ------------------------------------------

  void GetEvents(::google::protobuf::RpcController* controller,
                       const ::events::GetEventsRequest* request,
                       ::events::Events* response,
                       ::google::protobuf::Closure* done);
  void PutEvent(::google::protobuf::RpcController* controller,
                       const ::events::EventInfo* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EventsService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventInfo

// .events.EventType type = 1;
inline void EventInfo::clear_type() {
  type_ = 0;
}
inline ::events::EventType EventInfo::type() const {
  // @@protoc_insertion_point(field_get:events.EventInfo.type)
  return static_cast< ::events::EventType >(type_);
}
inline void EventInfo::set_type(::events::EventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:events.EventInfo.type)
}

// int64 timestamp = 2;
inline void EventInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EventInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:events.EventInfo.timestamp)
  return timestamp_;
}
inline void EventInfo::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:events.EventInfo.timestamp)
}

// string container_name = 3;
inline void EventInfo::clear_container_name() {
  container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventInfo::container_name() const {
  // @@protoc_insertion_point(field_get:events.EventInfo.container_name)
  return container_name_.GetNoArena();
}
inline void EventInfo::set_container_name(const ::std::string& value) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:events.EventInfo.container_name)
}
#if LANG_CXX11
inline void EventInfo::set_container_name(::std::string&& value) {
  
  container_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:events.EventInfo.container_name)
}
#endif
inline void EventInfo::set_container_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:events.EventInfo.container_name)
}
inline void EventInfo::set_container_name(const char* value, size_t size) {
  
  container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:events.EventInfo.container_name)
}
inline ::std::string* EventInfo::mutable_container_name() {
  
  // @@protoc_insertion_point(field_mutable:events.EventInfo.container_name)
  return container_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventInfo::release_container_name() {
  // @@protoc_insertion_point(field_release:events.EventInfo.container_name)
  
  return container_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventInfo::set_allocated_container_name(::std::string* container_name) {
  if (container_name != NULL) {
    
  } else {
    
  }
  container_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_name);
  // @@protoc_insertion_point(field_set_allocated:events.EventInfo.container_name)
}

// .common.UniqueId id = 4;
inline bool EventInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::UniqueId& EventInfo::id() const {
  const ::common::UniqueId* p = id_;
  // @@protoc_insertion_point(field_get:events.EventInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* EventInfo::release_id() {
  // @@protoc_insertion_point(field_release:events.EventInfo.id)
  
  ::common::UniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::UniqueId* EventInfo::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:events.EventInfo.id)
  return id_;
}
inline void EventInfo::set_allocated_id(::common::UniqueId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:events.EventInfo.id)
}

// -------------------------------------------------------------------

// Events

// repeated .events.EventInfo items = 1;
inline int Events::items_size() const {
  return items_.size();
}
inline void Events::clear_items() {
  items_.Clear();
}
inline const ::events::EventInfo& Events::items(int index) const {
  // @@protoc_insertion_point(field_get:events.Events.items)
  return items_.Get(index);
}
inline ::events::EventInfo* Events::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:events.Events.items)
  return items_.Mutable(index);
}
inline ::events::EventInfo* Events::add_items() {
  // @@protoc_insertion_point(field_add:events.Events.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::events::EventInfo >*
Events::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:events.Events.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::events::EventInfo >&
Events::items() const {
  // @@protoc_insertion_point(field_list:events.Events.items)
  return items_;
}

// -------------------------------------------------------------------

// GetEventsRequest

// int64 timestampFrom = 1;
inline void GetEventsRequest::clear_timestampfrom() {
  timestampfrom_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetEventsRequest::timestampfrom() const {
  // @@protoc_insertion_point(field_get:events.GetEventsRequest.timestampFrom)
  return timestampfrom_;
}
inline void GetEventsRequest::set_timestampfrom(::google::protobuf::int64 value) {
  
  timestampfrom_ = value;
  // @@protoc_insertion_point(field_set:events.GetEventsRequest.timestampFrom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace events

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::events::EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::events::EventType>() {
  return ::events::EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_events_2eproto__INCLUDED
