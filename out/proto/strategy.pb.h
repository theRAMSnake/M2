// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strategy.proto

#ifndef PROTOBUF_strategy_2eproto__INCLUDED
#define PROTOBUF_strategy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "container.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_strategy_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCommonItemPropertiesImpl();
void InitDefaultsCommonItemProperties();
void InitDefaultsGoalImpl();
void InitDefaultsGoal();
void InitDefaultsGoalsImpl();
void InitDefaultsGoals();
void InitDefaultsObjectiveImpl();
void InitDefaultsObjective();
void InitDefaultsTaskImpl();
void InitDefaultsTask();
void InitDefaultsGoalItemsImpl();
void InitDefaultsGoalItems();
void InitDefaultsMeasurementImpl();
void InitDefaultsMeasurement();
void InitDefaultsMeasurementsImpl();
void InitDefaultsMeasurements();
void InitDefaultsAffinityImpl();
void InitDefaultsAffinity();
void InitDefaultsAffinitiesImpl();
void InitDefaultsAffinities();
inline void InitDefaults() {
  InitDefaultsCommonItemProperties();
  InitDefaultsGoal();
  InitDefaultsGoals();
  InitDefaultsObjective();
  InitDefaultsTask();
  InitDefaultsGoalItems();
  InitDefaultsMeasurement();
  InitDefaultsMeasurements();
  InitDefaultsAffinity();
  InitDefaultsAffinities();
}
}  // namespace protobuf_strategy_2eproto
namespace strategy {
class Affinities;
class AffinitiesDefaultTypeInternal;
extern AffinitiesDefaultTypeInternal _Affinities_default_instance_;
class Affinity;
class AffinityDefaultTypeInternal;
extern AffinityDefaultTypeInternal _Affinity_default_instance_;
class CommonItemProperties;
class CommonItemPropertiesDefaultTypeInternal;
extern CommonItemPropertiesDefaultTypeInternal _CommonItemProperties_default_instance_;
class Goal;
class GoalDefaultTypeInternal;
extern GoalDefaultTypeInternal _Goal_default_instance_;
class GoalItems;
class GoalItemsDefaultTypeInternal;
extern GoalItemsDefaultTypeInternal _GoalItems_default_instance_;
class Goals;
class GoalsDefaultTypeInternal;
extern GoalsDefaultTypeInternal _Goals_default_instance_;
class Measurement;
class MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class Measurements;
class MeasurementsDefaultTypeInternal;
extern MeasurementsDefaultTypeInternal _Measurements_default_instance_;
class Objective;
class ObjectiveDefaultTypeInternal;
extern ObjectiveDefaultTypeInternal _Objective_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace strategy
namespace strategy {

// ===================================================================

class CommonItemProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.CommonItemProperties) */ {
 public:
  CommonItemProperties();
  virtual ~CommonItemProperties();

  CommonItemProperties(const CommonItemProperties& from);

  inline CommonItemProperties& operator=(const CommonItemProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonItemProperties(CommonItemProperties&& from) noexcept
    : CommonItemProperties() {
    *this = ::std::move(from);
  }

  inline CommonItemProperties& operator=(CommonItemProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonItemProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonItemProperties* internal_default_instance() {
    return reinterpret_cast<const CommonItemProperties*>(
               &_CommonItemProperties_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CommonItemProperties* other);
  friend void swap(CommonItemProperties& a, CommonItemProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonItemProperties* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonItemProperties* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonItemProperties& from);
  void MergeFrom(const CommonItemProperties& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonItemProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string notes = 5;
  void clear_notes();
  static const int kNotesFieldNumber = 5;
  const ::std::string& notes() const;
  void set_notes(const ::std::string& value);
  #if LANG_CXX11
  void set_notes(::std::string&& value);
  #endif
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  ::std::string* mutable_notes();
  ::std::string* release_notes();
  void set_allocated_notes(::std::string* notes);

  // .common.UniqueId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::common::UniqueId& id() const;
  ::common::UniqueId* release_id();
  ::common::UniqueId* mutable_id();
  void set_allocated_id(::common::UniqueId* id);

  // .common.UniqueId parent_goal_id = 2;
  bool has_parent_goal_id() const;
  void clear_parent_goal_id();
  static const int kParentGoalIdFieldNumber = 2;
  const ::common::UniqueId& parent_goal_id() const;
  ::common::UniqueId* release_parent_goal_id();
  ::common::UniqueId* mutable_parent_goal_id();
  void set_allocated_parent_goal_id(::common::UniqueId* parent_goal_id);

  // .common.UniqueId icon_id = 6;
  bool has_icon_id() const;
  void clear_icon_id();
  static const int kIconIdFieldNumber = 6;
  const ::common::UniqueId& icon_id() const;
  ::common::UniqueId* release_icon_id();
  ::common::UniqueId* mutable_icon_id();
  void set_allocated_icon_id(::common::UniqueId* icon_id);

  // @@protoc_insertion_point(class_scope:strategy.CommonItemProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr notes_;
  ::common::UniqueId* id_;
  ::common::UniqueId* parent_goal_id_;
  ::common::UniqueId* icon_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsCommonItemPropertiesImpl();
};
// -------------------------------------------------------------------

class Goal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.Goal) */ {
 public:
  Goal();
  virtual ~Goal();

  Goal(const Goal& from);

  inline Goal& operator=(const Goal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Goal(Goal&& from) noexcept
    : Goal() {
    *this = ::std::move(from);
  }

  inline Goal& operator=(Goal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Goal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Goal* internal_default_instance() {
    return reinterpret_cast<const Goal*>(
               &_Goal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Goal* other);
  friend void swap(Goal& a, Goal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Goal* New() const PROTOBUF_FINAL { return New(NULL); }

  Goal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Goal& from);
  void MergeFrom(const Goal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Goal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .strategy.CommonItemProperties common_props = 1;
  bool has_common_props() const;
  void clear_common_props();
  static const int kCommonPropsFieldNumber = 1;
  const ::strategy::CommonItemProperties& common_props() const;
  ::strategy::CommonItemProperties* release_common_props();
  ::strategy::CommonItemProperties* mutable_common_props();
  void set_allocated_common_props(::strategy::CommonItemProperties* common_props);

  // .common.UniqueId affinityId = 2;
  bool has_affinityid() const;
  void clear_affinityid();
  static const int kAffinityIdFieldNumber = 2;
  const ::common::UniqueId& affinityid() const;
  ::common::UniqueId* release_affinityid();
  ::common::UniqueId* mutable_affinityid();
  void set_allocated_affinityid(::common::UniqueId* affinityid);

  // bool focused = 3;
  void clear_focused();
  static const int kFocusedFieldNumber = 3;
  bool focused() const;
  void set_focused(bool value);

  // bool achieved = 4;
  void clear_achieved();
  static const int kAchievedFieldNumber = 4;
  bool achieved() const;
  void set_achieved(bool value);

  // @@protoc_insertion_point(class_scope:strategy.Goal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::strategy::CommonItemProperties* common_props_;
  ::common::UniqueId* affinityid_;
  bool focused_;
  bool achieved_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsGoalImpl();
};
// -------------------------------------------------------------------

class Goals : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.Goals) */ {
 public:
  Goals();
  virtual ~Goals();

  Goals(const Goals& from);

  inline Goals& operator=(const Goals& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Goals(Goals&& from) noexcept
    : Goals() {
    *this = ::std::move(from);
  }

  inline Goals& operator=(Goals&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Goals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Goals* internal_default_instance() {
    return reinterpret_cast<const Goals*>(
               &_Goals_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Goals* other);
  friend void swap(Goals& a, Goals& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Goals* New() const PROTOBUF_FINAL { return New(NULL); }

  Goals* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Goals& from);
  void MergeFrom(const Goals& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Goals* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .strategy.Goal items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::strategy::Goal& items(int index) const;
  ::strategy::Goal* mutable_items(int index);
  ::strategy::Goal* add_items();
  ::google::protobuf::RepeatedPtrField< ::strategy::Goal >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::strategy::Goal >&
      items() const;

  // @@protoc_insertion_point(class_scope:strategy.Goals)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::strategy::Goal > items_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsGoalsImpl();
};
// -------------------------------------------------------------------

class Objective : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.Objective) */ {
 public:
  Objective();
  virtual ~Objective();

  Objective(const Objective& from);

  inline Objective& operator=(const Objective& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Objective(Objective&& from) noexcept
    : Objective() {
    *this = ::std::move(from);
  }

  inline Objective& operator=(Objective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Objective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Objective* internal_default_instance() {
    return reinterpret_cast<const Objective*>(
               &_Objective_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Objective* other);
  friend void swap(Objective& a, Objective& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Objective* New() const PROTOBUF_FINAL { return New(NULL); }

  Objective* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Objective& from);
  void MergeFrom(const Objective& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Objective* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .strategy.CommonItemProperties common_props = 1;
  bool has_common_props() const;
  void clear_common_props();
  static const int kCommonPropsFieldNumber = 1;
  const ::strategy::CommonItemProperties& common_props() const;
  ::strategy::CommonItemProperties* release_common_props();
  ::strategy::CommonItemProperties* mutable_common_props();
  void set_allocated_common_props(::strategy::CommonItemProperties* common_props);

  // .common.UniqueId meas_id = 3;
  bool has_meas_id() const;
  void clear_meas_id();
  static const int kMeasIdFieldNumber = 3;
  const ::common::UniqueId& meas_id() const;
  ::common::UniqueId* release_meas_id();
  ::common::UniqueId* mutable_meas_id();
  void set_allocated_meas_id(::common::UniqueId* meas_id);

  // bool reached = 2;
  void clear_reached();
  static const int kReachedFieldNumber = 2;
  bool reached() const;
  void set_reached(bool value);

  // int32 expectedtreshold = 4;
  void clear_expectedtreshold();
  static const int kExpectedtresholdFieldNumber = 4;
  ::google::protobuf::int32 expectedtreshold() const;
  void set_expectedtreshold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:strategy.Objective)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::strategy::CommonItemProperties* common_props_;
  ::common::UniqueId* meas_id_;
  bool reached_;
  ::google::protobuf::int32 expectedtreshold_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsObjectiveImpl();
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const PROTOBUF_FINAL { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.UniqueId required_tasks = 4;
  int required_tasks_size() const;
  void clear_required_tasks();
  static const int kRequiredTasksFieldNumber = 4;
  const ::common::UniqueId& required_tasks(int index) const;
  ::common::UniqueId* mutable_required_tasks(int index);
  ::common::UniqueId* add_required_tasks();
  ::google::protobuf::RepeatedPtrField< ::common::UniqueId >*
      mutable_required_tasks();
  const ::google::protobuf::RepeatedPtrField< ::common::UniqueId >&
      required_tasks() const;

  // .strategy.CommonItemProperties common_props = 1;
  bool has_common_props() const;
  void clear_common_props();
  static const int kCommonPropsFieldNumber = 1;
  const ::strategy::CommonItemProperties& common_props() const;
  ::strategy::CommonItemProperties* release_common_props();
  ::strategy::CommonItemProperties* mutable_common_props();
  void set_allocated_common_props(::strategy::CommonItemProperties* common_props);

  // bool done = 2;
  void clear_done();
  static const int kDoneFieldNumber = 2;
  bool done() const;
  void set_done(bool value);

  // @@protoc_insertion_point(class_scope:strategy.Task)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::common::UniqueId > required_tasks_;
  ::strategy::CommonItemProperties* common_props_;
  bool done_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsTaskImpl();
};
// -------------------------------------------------------------------

class GoalItems : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.GoalItems) */ {
 public:
  GoalItems();
  virtual ~GoalItems();

  GoalItems(const GoalItems& from);

  inline GoalItems& operator=(const GoalItems& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoalItems(GoalItems&& from) noexcept
    : GoalItems() {
    *this = ::std::move(from);
  }

  inline GoalItems& operator=(GoalItems&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalItems& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoalItems* internal_default_instance() {
    return reinterpret_cast<const GoalItems*>(
               &_GoalItems_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GoalItems* other);
  friend void swap(GoalItems& a, GoalItems& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoalItems* New() const PROTOBUF_FINAL { return New(NULL); }

  GoalItems* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoalItems& from);
  void MergeFrom(const GoalItems& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoalItems* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .strategy.Objective objectives = 1;
  int objectives_size() const;
  void clear_objectives();
  static const int kObjectivesFieldNumber = 1;
  const ::strategy::Objective& objectives(int index) const;
  ::strategy::Objective* mutable_objectives(int index);
  ::strategy::Objective* add_objectives();
  ::google::protobuf::RepeatedPtrField< ::strategy::Objective >*
      mutable_objectives();
  const ::google::protobuf::RepeatedPtrField< ::strategy::Objective >&
      objectives() const;

  // repeated .strategy.Task tasks = 2;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 2;
  const ::strategy::Task& tasks(int index) const;
  ::strategy::Task* mutable_tasks(int index);
  ::strategy::Task* add_tasks();
  ::google::protobuf::RepeatedPtrField< ::strategy::Task >*
      mutable_tasks();
  const ::google::protobuf::RepeatedPtrField< ::strategy::Task >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:strategy.GoalItems)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::strategy::Objective > objectives_;
  ::google::protobuf::RepeatedPtrField< ::strategy::Task > tasks_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsGoalItemsImpl();
};
// -------------------------------------------------------------------

class Measurement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.Measurement) */ {
 public:
  Measurement();
  virtual ~Measurement();

  Measurement(const Measurement& from);

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(Measurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Measurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Measurement* other);
  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Measurement* New() const PROTOBUF_FINAL { return New(NULL); }

  Measurement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Measurement& from);
  void MergeFrom(const Measurement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Measurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .common.UniqueId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::common::UniqueId& id() const;
  ::common::UniqueId* release_id();
  ::common::UniqueId* mutable_id();
  void set_allocated_id(::common::UniqueId* id);

  // .common.UniqueId icon_id = 3;
  bool has_icon_id() const;
  void clear_icon_id();
  static const int kIconIdFieldNumber = 3;
  const ::common::UniqueId& icon_id() const;
  ::common::UniqueId* release_icon_id();
  ::common::UniqueId* mutable_icon_id();
  void set_allocated_icon_id(::common::UniqueId* icon_id);

  // int32 value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:strategy.Measurement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::common::UniqueId* id_;
  ::common::UniqueId* icon_id_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsMeasurementImpl();
};
// -------------------------------------------------------------------

class Measurements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.Measurements) */ {
 public:
  Measurements();
  virtual ~Measurements();

  Measurements(const Measurements& from);

  inline Measurements& operator=(const Measurements& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Measurements(Measurements&& from) noexcept
    : Measurements() {
    *this = ::std::move(from);
  }

  inline Measurements& operator=(Measurements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Measurements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurements* internal_default_instance() {
    return reinterpret_cast<const Measurements*>(
               &_Measurements_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Measurements* other);
  friend void swap(Measurements& a, Measurements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Measurements* New() const PROTOBUF_FINAL { return New(NULL); }

  Measurements* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Measurements& from);
  void MergeFrom(const Measurements& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Measurements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .strategy.Measurement items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::strategy::Measurement& items(int index) const;
  ::strategy::Measurement* mutable_items(int index);
  ::strategy::Measurement* add_items();
  ::google::protobuf::RepeatedPtrField< ::strategy::Measurement >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::strategy::Measurement >&
      items() const;

  // @@protoc_insertion_point(class_scope:strategy.Measurements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::strategy::Measurement > items_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsMeasurementsImpl();
};
// -------------------------------------------------------------------

class Affinity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.Affinity) */ {
 public:
  Affinity();
  virtual ~Affinity();

  Affinity(const Affinity& from);

  inline Affinity& operator=(const Affinity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Affinity(Affinity&& from) noexcept
    : Affinity() {
    *this = ::std::move(from);
  }

  inline Affinity& operator=(Affinity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Affinity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Affinity* internal_default_instance() {
    return reinterpret_cast<const Affinity*>(
               &_Affinity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Affinity* other);
  friend void swap(Affinity& a, Affinity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Affinity* New() const PROTOBUF_FINAL { return New(NULL); }

  Affinity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Affinity& from);
  void MergeFrom(const Affinity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Affinity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string colorName = 4;
  void clear_colorname();
  static const int kColorNameFieldNumber = 4;
  const ::std::string& colorname() const;
  void set_colorname(const ::std::string& value);
  #if LANG_CXX11
  void set_colorname(::std::string&& value);
  #endif
  void set_colorname(const char* value);
  void set_colorname(const char* value, size_t size);
  ::std::string* mutable_colorname();
  ::std::string* release_colorname();
  void set_allocated_colorname(::std::string* colorname);

  // .common.UniqueId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::common::UniqueId& id() const;
  ::common::UniqueId* release_id();
  ::common::UniqueId* mutable_id();
  void set_allocated_id(::common::UniqueId* id);

  // .common.UniqueId icon_id = 3;
  bool has_icon_id() const;
  void clear_icon_id();
  static const int kIconIdFieldNumber = 3;
  const ::common::UniqueId& icon_id() const;
  ::common::UniqueId* release_icon_id();
  ::common::UniqueId* mutable_icon_id();
  void set_allocated_icon_id(::common::UniqueId* icon_id);

  // @@protoc_insertion_point(class_scope:strategy.Affinity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr colorname_;
  ::common::UniqueId* id_;
  ::common::UniqueId* icon_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsAffinityImpl();
};
// -------------------------------------------------------------------

class Affinities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:strategy.Affinities) */ {
 public:
  Affinities();
  virtual ~Affinities();

  Affinities(const Affinities& from);

  inline Affinities& operator=(const Affinities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Affinities(Affinities&& from) noexcept
    : Affinities() {
    *this = ::std::move(from);
  }

  inline Affinities& operator=(Affinities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Affinities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Affinities* internal_default_instance() {
    return reinterpret_cast<const Affinities*>(
               &_Affinities_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Affinities* other);
  friend void swap(Affinities& a, Affinities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Affinities* New() const PROTOBUF_FINAL { return New(NULL); }

  Affinities* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Affinities& from);
  void MergeFrom(const Affinities& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Affinities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .strategy.Affinity items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::strategy::Affinity& items(int index) const;
  ::strategy::Affinity* mutable_items(int index);
  ::strategy::Affinity* add_items();
  ::google::protobuf::RepeatedPtrField< ::strategy::Affinity >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::strategy::Affinity >&
      items() const;

  // @@protoc_insertion_point(class_scope:strategy.Affinities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::strategy::Affinity > items_;
  mutable int _cached_size_;
  friend struct ::protobuf_strategy_2eproto::TableStruct;
  friend void ::protobuf_strategy_2eproto::InitDefaultsAffinitiesImpl();
};
// ===================================================================

class StrategyService_Stub;

class StrategyService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StrategyService() {};
 public:
  virtual ~StrategyService();

  typedef StrategyService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void AddGoal(::google::protobuf::RpcController* controller,
                       const ::strategy::Goal* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  virtual void ModifyGoal(::google::protobuf::RpcController* controller,
                       const ::strategy::Goal* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteGoal(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGoals(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::strategy::Goals* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGoal(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::strategy::Goal* response,
                       ::google::protobuf::Closure* done);
  virtual void AddObjective(::google::protobuf::RpcController* controller,
                       const ::strategy::Objective* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  virtual void ModifyObjective(::google::protobuf::RpcController* controller,
                       const ::strategy::Objective* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteObjective(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void AddTask(::google::protobuf::RpcController* controller,
                       const ::strategy::Task* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  virtual void ModifyTask(::google::protobuf::RpcController* controller,
                       const ::strategy::Task* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteTask(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGoalItems(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::strategy::GoalItems* response,
                       ::google::protobuf::Closure* done);
  virtual void AddMeasurement(::google::protobuf::RpcController* controller,
                       const ::strategy::Measurement* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  virtual void ModifyMeasurement(::google::protobuf::RpcController* controller,
                       const ::strategy::Measurement* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteMeasurement(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMeasurements(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::strategy::Measurements* response,
                       ::google::protobuf::Closure* done);
  virtual void ConfigureAffinities(::google::protobuf::RpcController* controller,
                       const ::strategy::Affinities* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAffinities(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::strategy::Affinities* response,
                       ::google::protobuf::Closure* done);
  virtual void Clear(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StrategyService);
};

class StrategyService_Stub : public StrategyService {
 public:
  StrategyService_Stub(::google::protobuf::RpcChannel* channel);
  StrategyService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~StrategyService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements StrategyService ------------------------------------------

  void AddGoal(::google::protobuf::RpcController* controller,
                       const ::strategy::Goal* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  void ModifyGoal(::google::protobuf::RpcController* controller,
                       const ::strategy::Goal* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void DeleteGoal(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void GetGoals(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::strategy::Goals* response,
                       ::google::protobuf::Closure* done);
  void GetGoal(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::strategy::Goal* response,
                       ::google::protobuf::Closure* done);
  void AddObjective(::google::protobuf::RpcController* controller,
                       const ::strategy::Objective* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  void ModifyObjective(::google::protobuf::RpcController* controller,
                       const ::strategy::Objective* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void DeleteObjective(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void AddTask(::google::protobuf::RpcController* controller,
                       const ::strategy::Task* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  void ModifyTask(::google::protobuf::RpcController* controller,
                       const ::strategy::Task* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void DeleteTask(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void GetGoalItems(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::strategy::GoalItems* response,
                       ::google::protobuf::Closure* done);
  void AddMeasurement(::google::protobuf::RpcController* controller,
                       const ::strategy::Measurement* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  void ModifyMeasurement(::google::protobuf::RpcController* controller,
                       const ::strategy::Measurement* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void DeleteMeasurement(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void GetMeasurements(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::strategy::Measurements* response,
                       ::google::protobuf::Closure* done);
  void ConfigureAffinities(::google::protobuf::RpcController* controller,
                       const ::strategy::Affinities* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void GetAffinities(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::strategy::Affinities* response,
                       ::google::protobuf::Closure* done);
  void Clear(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StrategyService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonItemProperties

// .common.UniqueId id = 1;
inline bool CommonItemProperties::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::UniqueId& CommonItemProperties::id() const {
  const ::common::UniqueId* p = id_;
  // @@protoc_insertion_point(field_get:strategy.CommonItemProperties.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* CommonItemProperties::release_id() {
  // @@protoc_insertion_point(field_release:strategy.CommonItemProperties.id)
  
  ::common::UniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::UniqueId* CommonItemProperties::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.CommonItemProperties.id)
  return id_;
}
inline void CommonItemProperties::set_allocated_id(::common::UniqueId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:strategy.CommonItemProperties.id)
}

// .common.UniqueId parent_goal_id = 2;
inline bool CommonItemProperties::has_parent_goal_id() const {
  return this != internal_default_instance() && parent_goal_id_ != NULL;
}
inline const ::common::UniqueId& CommonItemProperties::parent_goal_id() const {
  const ::common::UniqueId* p = parent_goal_id_;
  // @@protoc_insertion_point(field_get:strategy.CommonItemProperties.parent_goal_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* CommonItemProperties::release_parent_goal_id() {
  // @@protoc_insertion_point(field_release:strategy.CommonItemProperties.parent_goal_id)
  
  ::common::UniqueId* temp = parent_goal_id_;
  parent_goal_id_ = NULL;
  return temp;
}
inline ::common::UniqueId* CommonItemProperties::mutable_parent_goal_id() {
  
  if (parent_goal_id_ == NULL) {
    parent_goal_id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.CommonItemProperties.parent_goal_id)
  return parent_goal_id_;
}
inline void CommonItemProperties::set_allocated_parent_goal_id(::common::UniqueId* parent_goal_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_goal_id_);
  }
  if (parent_goal_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent_goal_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_goal_id, submessage_arena);
    }
    
  } else {
    
  }
  parent_goal_id_ = parent_goal_id;
  // @@protoc_insertion_point(field_set_allocated:strategy.CommonItemProperties.parent_goal_id)
}

// string name = 4;
inline void CommonItemProperties::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonItemProperties::name() const {
  // @@protoc_insertion_point(field_get:strategy.CommonItemProperties.name)
  return name_.GetNoArena();
}
inline void CommonItemProperties::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:strategy.CommonItemProperties.name)
}
#if LANG_CXX11
inline void CommonItemProperties::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:strategy.CommonItemProperties.name)
}
#endif
inline void CommonItemProperties::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:strategy.CommonItemProperties.name)
}
inline void CommonItemProperties::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:strategy.CommonItemProperties.name)
}
inline ::std::string* CommonItemProperties::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:strategy.CommonItemProperties.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonItemProperties::release_name() {
  // @@protoc_insertion_point(field_release:strategy.CommonItemProperties.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonItemProperties::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:strategy.CommonItemProperties.name)
}

// string notes = 5;
inline void CommonItemProperties::clear_notes() {
  notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonItemProperties::notes() const {
  // @@protoc_insertion_point(field_get:strategy.CommonItemProperties.notes)
  return notes_.GetNoArena();
}
inline void CommonItemProperties::set_notes(const ::std::string& value) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:strategy.CommonItemProperties.notes)
}
#if LANG_CXX11
inline void CommonItemProperties::set_notes(::std::string&& value) {
  
  notes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:strategy.CommonItemProperties.notes)
}
#endif
inline void CommonItemProperties::set_notes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:strategy.CommonItemProperties.notes)
}
inline void CommonItemProperties::set_notes(const char* value, size_t size) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:strategy.CommonItemProperties.notes)
}
inline ::std::string* CommonItemProperties::mutable_notes() {
  
  // @@protoc_insertion_point(field_mutable:strategy.CommonItemProperties.notes)
  return notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonItemProperties::release_notes() {
  // @@protoc_insertion_point(field_release:strategy.CommonItemProperties.notes)
  
  return notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonItemProperties::set_allocated_notes(::std::string* notes) {
  if (notes != NULL) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:strategy.CommonItemProperties.notes)
}

// .common.UniqueId icon_id = 6;
inline bool CommonItemProperties::has_icon_id() const {
  return this != internal_default_instance() && icon_id_ != NULL;
}
inline const ::common::UniqueId& CommonItemProperties::icon_id() const {
  const ::common::UniqueId* p = icon_id_;
  // @@protoc_insertion_point(field_get:strategy.CommonItemProperties.icon_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* CommonItemProperties::release_icon_id() {
  // @@protoc_insertion_point(field_release:strategy.CommonItemProperties.icon_id)
  
  ::common::UniqueId* temp = icon_id_;
  icon_id_ = NULL;
  return temp;
}
inline ::common::UniqueId* CommonItemProperties::mutable_icon_id() {
  
  if (icon_id_ == NULL) {
    icon_id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.CommonItemProperties.icon_id)
  return icon_id_;
}
inline void CommonItemProperties::set_allocated_icon_id(::common::UniqueId* icon_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(icon_id_);
  }
  if (icon_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      icon_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, icon_id, submessage_arena);
    }
    
  } else {
    
  }
  icon_id_ = icon_id;
  // @@protoc_insertion_point(field_set_allocated:strategy.CommonItemProperties.icon_id)
}

// -------------------------------------------------------------------

// Goal

// .strategy.CommonItemProperties common_props = 1;
inline bool Goal::has_common_props() const {
  return this != internal_default_instance() && common_props_ != NULL;
}
inline void Goal::clear_common_props() {
  if (GetArenaNoVirtual() == NULL && common_props_ != NULL) {
    delete common_props_;
  }
  common_props_ = NULL;
}
inline const ::strategy::CommonItemProperties& Goal::common_props() const {
  const ::strategy::CommonItemProperties* p = common_props_;
  // @@protoc_insertion_point(field_get:strategy.Goal.common_props)
  return p != NULL ? *p : *reinterpret_cast<const ::strategy::CommonItemProperties*>(
      &::strategy::_CommonItemProperties_default_instance_);
}
inline ::strategy::CommonItemProperties* Goal::release_common_props() {
  // @@protoc_insertion_point(field_release:strategy.Goal.common_props)
  
  ::strategy::CommonItemProperties* temp = common_props_;
  common_props_ = NULL;
  return temp;
}
inline ::strategy::CommonItemProperties* Goal::mutable_common_props() {
  
  if (common_props_ == NULL) {
    common_props_ = new ::strategy::CommonItemProperties;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Goal.common_props)
  return common_props_;
}
inline void Goal::set_allocated_common_props(::strategy::CommonItemProperties* common_props) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete common_props_;
  }
  if (common_props) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      common_props = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, common_props, submessage_arena);
    }
    
  } else {
    
  }
  common_props_ = common_props;
  // @@protoc_insertion_point(field_set_allocated:strategy.Goal.common_props)
}

// .common.UniqueId affinityId = 2;
inline bool Goal::has_affinityid() const {
  return this != internal_default_instance() && affinityid_ != NULL;
}
inline const ::common::UniqueId& Goal::affinityid() const {
  const ::common::UniqueId* p = affinityid_;
  // @@protoc_insertion_point(field_get:strategy.Goal.affinityId)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* Goal::release_affinityid() {
  // @@protoc_insertion_point(field_release:strategy.Goal.affinityId)
  
  ::common::UniqueId* temp = affinityid_;
  affinityid_ = NULL;
  return temp;
}
inline ::common::UniqueId* Goal::mutable_affinityid() {
  
  if (affinityid_ == NULL) {
    affinityid_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Goal.affinityId)
  return affinityid_;
}
inline void Goal::set_allocated_affinityid(::common::UniqueId* affinityid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(affinityid_);
  }
  if (affinityid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      affinityid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, affinityid, submessage_arena);
    }
    
  } else {
    
  }
  affinityid_ = affinityid;
  // @@protoc_insertion_point(field_set_allocated:strategy.Goal.affinityId)
}

// bool focused = 3;
inline void Goal::clear_focused() {
  focused_ = false;
}
inline bool Goal::focused() const {
  // @@protoc_insertion_point(field_get:strategy.Goal.focused)
  return focused_;
}
inline void Goal::set_focused(bool value) {
  
  focused_ = value;
  // @@protoc_insertion_point(field_set:strategy.Goal.focused)
}

// bool achieved = 4;
inline void Goal::clear_achieved() {
  achieved_ = false;
}
inline bool Goal::achieved() const {
  // @@protoc_insertion_point(field_get:strategy.Goal.achieved)
  return achieved_;
}
inline void Goal::set_achieved(bool value) {
  
  achieved_ = value;
  // @@protoc_insertion_point(field_set:strategy.Goal.achieved)
}

// -------------------------------------------------------------------

// Goals

// repeated .strategy.Goal items = 1;
inline int Goals::items_size() const {
  return items_.size();
}
inline void Goals::clear_items() {
  items_.Clear();
}
inline const ::strategy::Goal& Goals::items(int index) const {
  // @@protoc_insertion_point(field_get:strategy.Goals.items)
  return items_.Get(index);
}
inline ::strategy::Goal* Goals::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:strategy.Goals.items)
  return items_.Mutable(index);
}
inline ::strategy::Goal* Goals::add_items() {
  // @@protoc_insertion_point(field_add:strategy.Goals.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::strategy::Goal >*
Goals::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:strategy.Goals.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::strategy::Goal >&
Goals::items() const {
  // @@protoc_insertion_point(field_list:strategy.Goals.items)
  return items_;
}

// -------------------------------------------------------------------

// Objective

// .strategy.CommonItemProperties common_props = 1;
inline bool Objective::has_common_props() const {
  return this != internal_default_instance() && common_props_ != NULL;
}
inline void Objective::clear_common_props() {
  if (GetArenaNoVirtual() == NULL && common_props_ != NULL) {
    delete common_props_;
  }
  common_props_ = NULL;
}
inline const ::strategy::CommonItemProperties& Objective::common_props() const {
  const ::strategy::CommonItemProperties* p = common_props_;
  // @@protoc_insertion_point(field_get:strategy.Objective.common_props)
  return p != NULL ? *p : *reinterpret_cast<const ::strategy::CommonItemProperties*>(
      &::strategy::_CommonItemProperties_default_instance_);
}
inline ::strategy::CommonItemProperties* Objective::release_common_props() {
  // @@protoc_insertion_point(field_release:strategy.Objective.common_props)
  
  ::strategy::CommonItemProperties* temp = common_props_;
  common_props_ = NULL;
  return temp;
}
inline ::strategy::CommonItemProperties* Objective::mutable_common_props() {
  
  if (common_props_ == NULL) {
    common_props_ = new ::strategy::CommonItemProperties;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Objective.common_props)
  return common_props_;
}
inline void Objective::set_allocated_common_props(::strategy::CommonItemProperties* common_props) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete common_props_;
  }
  if (common_props) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      common_props = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, common_props, submessage_arena);
    }
    
  } else {
    
  }
  common_props_ = common_props;
  // @@protoc_insertion_point(field_set_allocated:strategy.Objective.common_props)
}

// bool reached = 2;
inline void Objective::clear_reached() {
  reached_ = false;
}
inline bool Objective::reached() const {
  // @@protoc_insertion_point(field_get:strategy.Objective.reached)
  return reached_;
}
inline void Objective::set_reached(bool value) {
  
  reached_ = value;
  // @@protoc_insertion_point(field_set:strategy.Objective.reached)
}

// .common.UniqueId meas_id = 3;
inline bool Objective::has_meas_id() const {
  return this != internal_default_instance() && meas_id_ != NULL;
}
inline const ::common::UniqueId& Objective::meas_id() const {
  const ::common::UniqueId* p = meas_id_;
  // @@protoc_insertion_point(field_get:strategy.Objective.meas_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* Objective::release_meas_id() {
  // @@protoc_insertion_point(field_release:strategy.Objective.meas_id)
  
  ::common::UniqueId* temp = meas_id_;
  meas_id_ = NULL;
  return temp;
}
inline ::common::UniqueId* Objective::mutable_meas_id() {
  
  if (meas_id_ == NULL) {
    meas_id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Objective.meas_id)
  return meas_id_;
}
inline void Objective::set_allocated_meas_id(::common::UniqueId* meas_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meas_id_);
  }
  if (meas_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meas_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meas_id, submessage_arena);
    }
    
  } else {
    
  }
  meas_id_ = meas_id;
  // @@protoc_insertion_point(field_set_allocated:strategy.Objective.meas_id)
}

// int32 expectedtreshold = 4;
inline void Objective::clear_expectedtreshold() {
  expectedtreshold_ = 0;
}
inline ::google::protobuf::int32 Objective::expectedtreshold() const {
  // @@protoc_insertion_point(field_get:strategy.Objective.expectedtreshold)
  return expectedtreshold_;
}
inline void Objective::set_expectedtreshold(::google::protobuf::int32 value) {
  
  expectedtreshold_ = value;
  // @@protoc_insertion_point(field_set:strategy.Objective.expectedtreshold)
}

// -------------------------------------------------------------------

// Task

// .strategy.CommonItemProperties common_props = 1;
inline bool Task::has_common_props() const {
  return this != internal_default_instance() && common_props_ != NULL;
}
inline void Task::clear_common_props() {
  if (GetArenaNoVirtual() == NULL && common_props_ != NULL) {
    delete common_props_;
  }
  common_props_ = NULL;
}
inline const ::strategy::CommonItemProperties& Task::common_props() const {
  const ::strategy::CommonItemProperties* p = common_props_;
  // @@protoc_insertion_point(field_get:strategy.Task.common_props)
  return p != NULL ? *p : *reinterpret_cast<const ::strategy::CommonItemProperties*>(
      &::strategy::_CommonItemProperties_default_instance_);
}
inline ::strategy::CommonItemProperties* Task::release_common_props() {
  // @@protoc_insertion_point(field_release:strategy.Task.common_props)
  
  ::strategy::CommonItemProperties* temp = common_props_;
  common_props_ = NULL;
  return temp;
}
inline ::strategy::CommonItemProperties* Task::mutable_common_props() {
  
  if (common_props_ == NULL) {
    common_props_ = new ::strategy::CommonItemProperties;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Task.common_props)
  return common_props_;
}
inline void Task::set_allocated_common_props(::strategy::CommonItemProperties* common_props) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete common_props_;
  }
  if (common_props) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      common_props = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, common_props, submessage_arena);
    }
    
  } else {
    
  }
  common_props_ = common_props;
  // @@protoc_insertion_point(field_set_allocated:strategy.Task.common_props)
}

// bool done = 2;
inline void Task::clear_done() {
  done_ = false;
}
inline bool Task::done() const {
  // @@protoc_insertion_point(field_get:strategy.Task.done)
  return done_;
}
inline void Task::set_done(bool value) {
  
  done_ = value;
  // @@protoc_insertion_point(field_set:strategy.Task.done)
}

// repeated .common.UniqueId required_tasks = 4;
inline int Task::required_tasks_size() const {
  return required_tasks_.size();
}
inline const ::common::UniqueId& Task::required_tasks(int index) const {
  // @@protoc_insertion_point(field_get:strategy.Task.required_tasks)
  return required_tasks_.Get(index);
}
inline ::common::UniqueId* Task::mutable_required_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:strategy.Task.required_tasks)
  return required_tasks_.Mutable(index);
}
inline ::common::UniqueId* Task::add_required_tasks() {
  // @@protoc_insertion_point(field_add:strategy.Task.required_tasks)
  return required_tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::common::UniqueId >*
Task::mutable_required_tasks() {
  // @@protoc_insertion_point(field_mutable_list:strategy.Task.required_tasks)
  return &required_tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::common::UniqueId >&
Task::required_tasks() const {
  // @@protoc_insertion_point(field_list:strategy.Task.required_tasks)
  return required_tasks_;
}

// -------------------------------------------------------------------

// GoalItems

// repeated .strategy.Objective objectives = 1;
inline int GoalItems::objectives_size() const {
  return objectives_.size();
}
inline void GoalItems::clear_objectives() {
  objectives_.Clear();
}
inline const ::strategy::Objective& GoalItems::objectives(int index) const {
  // @@protoc_insertion_point(field_get:strategy.GoalItems.objectives)
  return objectives_.Get(index);
}
inline ::strategy::Objective* GoalItems::mutable_objectives(int index) {
  // @@protoc_insertion_point(field_mutable:strategy.GoalItems.objectives)
  return objectives_.Mutable(index);
}
inline ::strategy::Objective* GoalItems::add_objectives() {
  // @@protoc_insertion_point(field_add:strategy.GoalItems.objectives)
  return objectives_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::strategy::Objective >*
GoalItems::mutable_objectives() {
  // @@protoc_insertion_point(field_mutable_list:strategy.GoalItems.objectives)
  return &objectives_;
}
inline const ::google::protobuf::RepeatedPtrField< ::strategy::Objective >&
GoalItems::objectives() const {
  // @@protoc_insertion_point(field_list:strategy.GoalItems.objectives)
  return objectives_;
}

// repeated .strategy.Task tasks = 2;
inline int GoalItems::tasks_size() const {
  return tasks_.size();
}
inline void GoalItems::clear_tasks() {
  tasks_.Clear();
}
inline const ::strategy::Task& GoalItems::tasks(int index) const {
  // @@protoc_insertion_point(field_get:strategy.GoalItems.tasks)
  return tasks_.Get(index);
}
inline ::strategy::Task* GoalItems::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:strategy.GoalItems.tasks)
  return tasks_.Mutable(index);
}
inline ::strategy::Task* GoalItems::add_tasks() {
  // @@protoc_insertion_point(field_add:strategy.GoalItems.tasks)
  return tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::strategy::Task >*
GoalItems::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:strategy.GoalItems.tasks)
  return &tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::strategy::Task >&
GoalItems::tasks() const {
  // @@protoc_insertion_point(field_list:strategy.GoalItems.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// Measurement

// .common.UniqueId id = 1;
inline bool Measurement::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::UniqueId& Measurement::id() const {
  const ::common::UniqueId* p = id_;
  // @@protoc_insertion_point(field_get:strategy.Measurement.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* Measurement::release_id() {
  // @@protoc_insertion_point(field_release:strategy.Measurement.id)
  
  ::common::UniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::UniqueId* Measurement::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Measurement.id)
  return id_;
}
inline void Measurement::set_allocated_id(::common::UniqueId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:strategy.Measurement.id)
}

// string name = 2;
inline void Measurement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measurement::name() const {
  // @@protoc_insertion_point(field_get:strategy.Measurement.name)
  return name_.GetNoArena();
}
inline void Measurement::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:strategy.Measurement.name)
}
#if LANG_CXX11
inline void Measurement::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:strategy.Measurement.name)
}
#endif
inline void Measurement::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:strategy.Measurement.name)
}
inline void Measurement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:strategy.Measurement.name)
}
inline ::std::string* Measurement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:strategy.Measurement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measurement::release_name() {
  // @@protoc_insertion_point(field_release:strategy.Measurement.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measurement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:strategy.Measurement.name)
}

// .common.UniqueId icon_id = 3;
inline bool Measurement::has_icon_id() const {
  return this != internal_default_instance() && icon_id_ != NULL;
}
inline const ::common::UniqueId& Measurement::icon_id() const {
  const ::common::UniqueId* p = icon_id_;
  // @@protoc_insertion_point(field_get:strategy.Measurement.icon_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* Measurement::release_icon_id() {
  // @@protoc_insertion_point(field_release:strategy.Measurement.icon_id)
  
  ::common::UniqueId* temp = icon_id_;
  icon_id_ = NULL;
  return temp;
}
inline ::common::UniqueId* Measurement::mutable_icon_id() {
  
  if (icon_id_ == NULL) {
    icon_id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Measurement.icon_id)
  return icon_id_;
}
inline void Measurement::set_allocated_icon_id(::common::UniqueId* icon_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(icon_id_);
  }
  if (icon_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      icon_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, icon_id, submessage_arena);
    }
    
  } else {
    
  }
  icon_id_ = icon_id;
  // @@protoc_insertion_point(field_set_allocated:strategy.Measurement.icon_id)
}

// int32 value = 4;
inline void Measurement::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 Measurement::value() const {
  // @@protoc_insertion_point(field_get:strategy.Measurement.value)
  return value_;
}
inline void Measurement::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:strategy.Measurement.value)
}

// -------------------------------------------------------------------

// Measurements

// repeated .strategy.Measurement items = 1;
inline int Measurements::items_size() const {
  return items_.size();
}
inline void Measurements::clear_items() {
  items_.Clear();
}
inline const ::strategy::Measurement& Measurements::items(int index) const {
  // @@protoc_insertion_point(field_get:strategy.Measurements.items)
  return items_.Get(index);
}
inline ::strategy::Measurement* Measurements::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:strategy.Measurements.items)
  return items_.Mutable(index);
}
inline ::strategy::Measurement* Measurements::add_items() {
  // @@protoc_insertion_point(field_add:strategy.Measurements.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::strategy::Measurement >*
Measurements::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:strategy.Measurements.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::strategy::Measurement >&
Measurements::items() const {
  // @@protoc_insertion_point(field_list:strategy.Measurements.items)
  return items_;
}

// -------------------------------------------------------------------

// Affinity

// .common.UniqueId id = 1;
inline bool Affinity::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::UniqueId& Affinity::id() const {
  const ::common::UniqueId* p = id_;
  // @@protoc_insertion_point(field_get:strategy.Affinity.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* Affinity::release_id() {
  // @@protoc_insertion_point(field_release:strategy.Affinity.id)
  
  ::common::UniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::UniqueId* Affinity::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Affinity.id)
  return id_;
}
inline void Affinity::set_allocated_id(::common::UniqueId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:strategy.Affinity.id)
}

// string name = 2;
inline void Affinity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Affinity::name() const {
  // @@protoc_insertion_point(field_get:strategy.Affinity.name)
  return name_.GetNoArena();
}
inline void Affinity::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:strategy.Affinity.name)
}
#if LANG_CXX11
inline void Affinity::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:strategy.Affinity.name)
}
#endif
inline void Affinity::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:strategy.Affinity.name)
}
inline void Affinity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:strategy.Affinity.name)
}
inline ::std::string* Affinity::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:strategy.Affinity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Affinity::release_name() {
  // @@protoc_insertion_point(field_release:strategy.Affinity.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Affinity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:strategy.Affinity.name)
}

// .common.UniqueId icon_id = 3;
inline bool Affinity::has_icon_id() const {
  return this != internal_default_instance() && icon_id_ != NULL;
}
inline const ::common::UniqueId& Affinity::icon_id() const {
  const ::common::UniqueId* p = icon_id_;
  // @@protoc_insertion_point(field_get:strategy.Affinity.icon_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* Affinity::release_icon_id() {
  // @@protoc_insertion_point(field_release:strategy.Affinity.icon_id)
  
  ::common::UniqueId* temp = icon_id_;
  icon_id_ = NULL;
  return temp;
}
inline ::common::UniqueId* Affinity::mutable_icon_id() {
  
  if (icon_id_ == NULL) {
    icon_id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:strategy.Affinity.icon_id)
  return icon_id_;
}
inline void Affinity::set_allocated_icon_id(::common::UniqueId* icon_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(icon_id_);
  }
  if (icon_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      icon_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, icon_id, submessage_arena);
    }
    
  } else {
    
  }
  icon_id_ = icon_id;
  // @@protoc_insertion_point(field_set_allocated:strategy.Affinity.icon_id)
}

// string colorName = 4;
inline void Affinity::clear_colorname() {
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Affinity::colorname() const {
  // @@protoc_insertion_point(field_get:strategy.Affinity.colorName)
  return colorname_.GetNoArena();
}
inline void Affinity::set_colorname(const ::std::string& value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:strategy.Affinity.colorName)
}
#if LANG_CXX11
inline void Affinity::set_colorname(::std::string&& value) {
  
  colorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:strategy.Affinity.colorName)
}
#endif
inline void Affinity::set_colorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:strategy.Affinity.colorName)
}
inline void Affinity::set_colorname(const char* value, size_t size) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:strategy.Affinity.colorName)
}
inline ::std::string* Affinity::mutable_colorname() {
  
  // @@protoc_insertion_point(field_mutable:strategy.Affinity.colorName)
  return colorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Affinity::release_colorname() {
  // @@protoc_insertion_point(field_release:strategy.Affinity.colorName)
  
  return colorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Affinity::set_allocated_colorname(::std::string* colorname) {
  if (colorname != NULL) {
    
  } else {
    
  }
  colorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colorname);
  // @@protoc_insertion_point(field_set_allocated:strategy.Affinity.colorName)
}

// -------------------------------------------------------------------

// Affinities

// repeated .strategy.Affinity items = 1;
inline int Affinities::items_size() const {
  return items_.size();
}
inline void Affinities::clear_items() {
  items_.Clear();
}
inline const ::strategy::Affinity& Affinities::items(int index) const {
  // @@protoc_insertion_point(field_get:strategy.Affinities.items)
  return items_.Get(index);
}
inline ::strategy::Affinity* Affinities::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:strategy.Affinities.items)
  return items_.Mutable(index);
}
inline ::strategy::Affinity* Affinities::add_items() {
  // @@protoc_insertion_point(field_add:strategy.Affinities.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::strategy::Affinity >*
Affinities::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:strategy.Affinities.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::strategy::Affinity >&
Affinities::items() const {
  // @@protoc_insertion_point(field_list:strategy.Affinities.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace strategy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_strategy_2eproto__INCLUDED
