// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journal.proto

#ifndef PROTOBUF_journal_2eproto__INCLUDED
#define PROTOBUF_journal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_journal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsJournalItemImpl();
void InitDefaultsJournalItem();
void InitDefaultsIndexItemImpl();
void InitDefaultsIndexItem();
void InitDefaultsPageImpl();
void InitDefaultsPage();
void InitDefaultsSearchResultImpl();
void InitDefaultsSearchResult();
void InitDefaultsInsertFolderParamsImpl();
void InitDefaultsInsertFolderParams();
void InitDefaultsInsertPageParamsImpl();
void InitDefaultsInsertPageParams();
void InitDefaultsIndexImpl();
void InitDefaultsIndex();
inline void InitDefaults() {
  InitDefaultsJournalItem();
  InitDefaultsIndexItem();
  InitDefaultsPage();
  InitDefaultsSearchResult();
  InitDefaultsInsertFolderParams();
  InitDefaultsInsertPageParams();
  InitDefaultsIndex();
}
}  // namespace protobuf_journal_2eproto
namespace journal {
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class IndexItem;
class IndexItemDefaultTypeInternal;
extern IndexItemDefaultTypeInternal _IndexItem_default_instance_;
class InsertFolderParams;
class InsertFolderParamsDefaultTypeInternal;
extern InsertFolderParamsDefaultTypeInternal _InsertFolderParams_default_instance_;
class InsertPageParams;
class InsertPageParamsDefaultTypeInternal;
extern InsertPageParamsDefaultTypeInternal _InsertPageParams_default_instance_;
class JournalItem;
class JournalItemDefaultTypeInternal;
extern JournalItemDefaultTypeInternal _JournalItem_default_instance_;
class Page;
class PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class SearchResult;
class SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
}  // namespace journal
namespace journal {

// ===================================================================

class JournalItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:journal.JournalItem) */ {
 public:
  JournalItem();
  virtual ~JournalItem();

  JournalItem(const JournalItem& from);

  inline JournalItem& operator=(const JournalItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JournalItem(JournalItem&& from) noexcept
    : JournalItem() {
    *this = ::std::move(from);
  }

  inline JournalItem& operator=(JournalItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JournalItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JournalItem* internal_default_instance() {
    return reinterpret_cast<const JournalItem*>(
               &_JournalItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(JournalItem* other);
  friend void swap(JournalItem& a, JournalItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JournalItem* New() const PROTOBUF_FINAL { return New(NULL); }

  JournalItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JournalItem& from);
  void MergeFrom(const JournalItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JournalItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .common.UniqueId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::common::UniqueId& id() const;
  ::common::UniqueId* release_id();
  ::common::UniqueId* mutable_id();
  void set_allocated_id(::common::UniqueId* id);

  // .common.UniqueId folderId = 2;
  bool has_folderid() const;
  void clear_folderid();
  static const int kFolderIdFieldNumber = 2;
  const ::common::UniqueId& folderid() const;
  ::common::UniqueId* release_folderid();
  ::common::UniqueId* mutable_folderid();
  void set_allocated_folderid(::common::UniqueId* folderid);

  // @@protoc_insertion_point(class_scope:journal.JournalItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::common::UniqueId* id_;
  ::common::UniqueId* folderid_;
  mutable int _cached_size_;
  friend struct ::protobuf_journal_2eproto::TableStruct;
  friend void ::protobuf_journal_2eproto::InitDefaultsJournalItemImpl();
};
// -------------------------------------------------------------------

class IndexItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:journal.IndexItem) */ {
 public:
  IndexItem();
  virtual ~IndexItem();

  IndexItem(const IndexItem& from);

  inline IndexItem& operator=(const IndexItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexItem(IndexItem&& from) noexcept
    : IndexItem() {
    *this = ::std::move(from);
  }

  inline IndexItem& operator=(IndexItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexItem* internal_default_instance() {
    return reinterpret_cast<const IndexItem*>(
               &_IndexItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IndexItem* other);
  friend void swap(IndexItem& a, IndexItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexItem* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexItem& from);
  void MergeFrom(const IndexItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .journal.JournalItem journalItem = 1;
  bool has_journalitem() const;
  void clear_journalitem();
  static const int kJournalItemFieldNumber = 1;
  const ::journal::JournalItem& journalitem() const;
  ::journal::JournalItem* release_journalitem();
  ::journal::JournalItem* mutable_journalitem();
  void set_allocated_journalitem(::journal::JournalItem* journalitem);

  // int64 modifiedTimestamp = 2;
  void clear_modifiedtimestamp();
  static const int kModifiedTimestampFieldNumber = 2;
  ::google::protobuf::int64 modifiedtimestamp() const;
  void set_modifiedtimestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:journal.IndexItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::journal::JournalItem* journalitem_;
  ::google::protobuf::int64 modifiedtimestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_journal_2eproto::TableStruct;
  friend void ::protobuf_journal_2eproto::InitDefaultsIndexItemImpl();
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:journal.Page) */ {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(Page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Page* other);
  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Page* New() const PROTOBUF_FINAL { return New(NULL); }

  Page* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .journal.JournalItem journalItem = 1;
  bool has_journalitem() const;
  void clear_journalitem();
  static const int kJournalItemFieldNumber = 1;
  const ::journal::JournalItem& journalitem() const;
  ::journal::JournalItem* release_journalitem();
  ::journal::JournalItem* mutable_journalitem();
  void set_allocated_journalitem(::journal::JournalItem* journalitem);

  // @@protoc_insertion_point(class_scope:journal.Page)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::journal::JournalItem* journalitem_;
  mutable int _cached_size_;
  friend struct ::protobuf_journal_2eproto::TableStruct;
  friend void ::protobuf_journal_2eproto::InitDefaultsPageImpl();
};
// -------------------------------------------------------------------

class SearchResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:journal.SearchResult) */ {
 public:
  SearchResult();
  virtual ~SearchResult();

  SearchResult(const SearchResult& from);

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SearchResult* other);
  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.UniqueId pageId = 1;
  int pageid_size() const;
  void clear_pageid();
  static const int kPageIdFieldNumber = 1;
  const ::common::UniqueId& pageid(int index) const;
  ::common::UniqueId* mutable_pageid(int index);
  ::common::UniqueId* add_pageid();
  ::google::protobuf::RepeatedPtrField< ::common::UniqueId >*
      mutable_pageid();
  const ::google::protobuf::RepeatedPtrField< ::common::UniqueId >&
      pageid() const;

  // repeated int64 position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::int64 position(int index) const;
  void set_position(int index, ::google::protobuf::int64 value);
  void add_position(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      position() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_position();

  // @@protoc_insertion_point(class_scope:journal.SearchResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::common::UniqueId > pageid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > position_;
  mutable int _position_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_journal_2eproto::TableStruct;
  friend void ::protobuf_journal_2eproto::InitDefaultsSearchResultImpl();
};
// -------------------------------------------------------------------

class InsertFolderParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:journal.InsertFolderParams) */ {
 public:
  InsertFolderParams();
  virtual ~InsertFolderParams();

  InsertFolderParams(const InsertFolderParams& from);

  inline InsertFolderParams& operator=(const InsertFolderParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsertFolderParams(InsertFolderParams&& from) noexcept
    : InsertFolderParams() {
    *this = ::std::move(from);
  }

  inline InsertFolderParams& operator=(InsertFolderParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertFolderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertFolderParams* internal_default_instance() {
    return reinterpret_cast<const InsertFolderParams*>(
               &_InsertFolderParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(InsertFolderParams* other);
  friend void swap(InsertFolderParams& a, InsertFolderParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsertFolderParams* New() const PROTOBUF_FINAL { return New(NULL); }

  InsertFolderParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InsertFolderParams& from);
  void MergeFrom(const InsertFolderParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InsertFolderParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .common.UniqueId folderId = 1;
  bool has_folderid() const;
  void clear_folderid();
  static const int kFolderIdFieldNumber = 1;
  const ::common::UniqueId& folderid() const;
  ::common::UniqueId* release_folderid();
  ::common::UniqueId* mutable_folderid();
  void set_allocated_folderid(::common::UniqueId* folderid);

  // @@protoc_insertion_point(class_scope:journal.InsertFolderParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::common::UniqueId* folderid_;
  mutable int _cached_size_;
  friend struct ::protobuf_journal_2eproto::TableStruct;
  friend void ::protobuf_journal_2eproto::InitDefaultsInsertFolderParamsImpl();
};
// -------------------------------------------------------------------

class InsertPageParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:journal.InsertPageParams) */ {
 public:
  InsertPageParams();
  virtual ~InsertPageParams();

  InsertPageParams(const InsertPageParams& from);

  inline InsertPageParams& operator=(const InsertPageParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsertPageParams(InsertPageParams&& from) noexcept
    : InsertPageParams() {
    *this = ::std::move(from);
  }

  inline InsertPageParams& operator=(InsertPageParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertPageParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertPageParams* internal_default_instance() {
    return reinterpret_cast<const InsertPageParams*>(
               &_InsertPageParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(InsertPageParams* other);
  friend void swap(InsertPageParams& a, InsertPageParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsertPageParams* New() const PROTOBUF_FINAL { return New(NULL); }

  InsertPageParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InsertPageParams& from);
  void MergeFrom(const InsertPageParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InsertPageParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .common.UniqueId folderId = 1;
  bool has_folderid() const;
  void clear_folderid();
  static const int kFolderIdFieldNumber = 1;
  const ::common::UniqueId& folderid() const;
  ::common::UniqueId* release_folderid();
  ::common::UniqueId* mutable_folderid();
  void set_allocated_folderid(::common::UniqueId* folderid);

  // @@protoc_insertion_point(class_scope:journal.InsertPageParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::common::UniqueId* folderid_;
  mutable int _cached_size_;
  friend struct ::protobuf_journal_2eproto::TableStruct;
  friend void ::protobuf_journal_2eproto::InitDefaultsInsertPageParamsImpl();
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:journal.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(Index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Index* other);
  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const PROTOBUF_FINAL { return New(NULL); }

  Index* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .journal.IndexItem items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::journal::IndexItem& items(int index) const;
  ::journal::IndexItem* mutable_items(int index);
  ::journal::IndexItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::journal::IndexItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::journal::IndexItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:journal.Index)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::journal::IndexItem > items_;
  mutable int _cached_size_;
  friend struct ::protobuf_journal_2eproto::TableStruct;
  friend void ::protobuf_journal_2eproto::InitDefaultsIndexImpl();
};
// ===================================================================

class JournalService_Stub;

class JournalService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline JournalService() {};
 public:
  virtual ~JournalService();

  typedef JournalService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void InsertFolder(::google::protobuf::RpcController* controller,
                       const ::journal::InsertFolderParams* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  virtual void InsertPage(::google::protobuf::RpcController* controller,
                       const ::journal::InsertPageParams* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteItem(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateFolder(::google::protobuf::RpcController* controller,
                       const ::journal::JournalItem* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdatePage(::google::protobuf::RpcController* controller,
                       const ::journal::Page* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void GetIndex(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::journal::Index* response,
                       ::google::protobuf::Closure* done);
  virtual void Search(::google::protobuf::RpcController* controller,
                       const ::common::StringMessage* request,
                       ::journal::SearchResult* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPage(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::journal::Page* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(JournalService);
};

class JournalService_Stub : public JournalService {
 public:
  JournalService_Stub(::google::protobuf::RpcChannel* channel);
  JournalService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~JournalService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements JournalService ------------------------------------------

  void InsertFolder(::google::protobuf::RpcController* controller,
                       const ::journal::InsertFolderParams* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  void InsertPage(::google::protobuf::RpcController* controller,
                       const ::journal::InsertPageParams* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  void DeleteItem(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void UpdateFolder(::google::protobuf::RpcController* controller,
                       const ::journal::JournalItem* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void UpdatePage(::google::protobuf::RpcController* controller,
                       const ::journal::Page* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void GetIndex(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::journal::Index* response,
                       ::google::protobuf::Closure* done);
  void Search(::google::protobuf::RpcController* controller,
                       const ::common::StringMessage* request,
                       ::journal::SearchResult* response,
                       ::google::protobuf::Closure* done);
  void GetPage(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::journal::Page* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(JournalService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JournalItem

// .common.UniqueId id = 1;
inline bool JournalItem::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::UniqueId& JournalItem::id() const {
  const ::common::UniqueId* p = id_;
  // @@protoc_insertion_point(field_get:journal.JournalItem.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* JournalItem::release_id() {
  // @@protoc_insertion_point(field_release:journal.JournalItem.id)
  
  ::common::UniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::UniqueId* JournalItem::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:journal.JournalItem.id)
  return id_;
}
inline void JournalItem::set_allocated_id(::common::UniqueId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:journal.JournalItem.id)
}

// .common.UniqueId folderId = 2;
inline bool JournalItem::has_folderid() const {
  return this != internal_default_instance() && folderid_ != NULL;
}
inline const ::common::UniqueId& JournalItem::folderid() const {
  const ::common::UniqueId* p = folderid_;
  // @@protoc_insertion_point(field_get:journal.JournalItem.folderId)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* JournalItem::release_folderid() {
  // @@protoc_insertion_point(field_release:journal.JournalItem.folderId)
  
  ::common::UniqueId* temp = folderid_;
  folderid_ = NULL;
  return temp;
}
inline ::common::UniqueId* JournalItem::mutable_folderid() {
  
  if (folderid_ == NULL) {
    folderid_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:journal.JournalItem.folderId)
  return folderid_;
}
inline void JournalItem::set_allocated_folderid(::common::UniqueId* folderid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(folderid_);
  }
  if (folderid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      folderid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, folderid, submessage_arena);
    }
    
  } else {
    
  }
  folderid_ = folderid;
  // @@protoc_insertion_point(field_set_allocated:journal.JournalItem.folderId)
}

// string title = 3;
inline void JournalItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JournalItem::title() const {
  // @@protoc_insertion_point(field_get:journal.JournalItem.title)
  return title_.GetNoArena();
}
inline void JournalItem::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:journal.JournalItem.title)
}
#if LANG_CXX11
inline void JournalItem::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:journal.JournalItem.title)
}
#endif
inline void JournalItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:journal.JournalItem.title)
}
inline void JournalItem::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:journal.JournalItem.title)
}
inline ::std::string* JournalItem::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:journal.JournalItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JournalItem::release_title() {
  // @@protoc_insertion_point(field_release:journal.JournalItem.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JournalItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:journal.JournalItem.title)
}

// -------------------------------------------------------------------

// IndexItem

// .journal.JournalItem journalItem = 1;
inline bool IndexItem::has_journalitem() const {
  return this != internal_default_instance() && journalitem_ != NULL;
}
inline void IndexItem::clear_journalitem() {
  if (GetArenaNoVirtual() == NULL && journalitem_ != NULL) {
    delete journalitem_;
  }
  journalitem_ = NULL;
}
inline const ::journal::JournalItem& IndexItem::journalitem() const {
  const ::journal::JournalItem* p = journalitem_;
  // @@protoc_insertion_point(field_get:journal.IndexItem.journalItem)
  return p != NULL ? *p : *reinterpret_cast<const ::journal::JournalItem*>(
      &::journal::_JournalItem_default_instance_);
}
inline ::journal::JournalItem* IndexItem::release_journalitem() {
  // @@protoc_insertion_point(field_release:journal.IndexItem.journalItem)
  
  ::journal::JournalItem* temp = journalitem_;
  journalitem_ = NULL;
  return temp;
}
inline ::journal::JournalItem* IndexItem::mutable_journalitem() {
  
  if (journalitem_ == NULL) {
    journalitem_ = new ::journal::JournalItem;
  }
  // @@protoc_insertion_point(field_mutable:journal.IndexItem.journalItem)
  return journalitem_;
}
inline void IndexItem::set_allocated_journalitem(::journal::JournalItem* journalitem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete journalitem_;
  }
  if (journalitem) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      journalitem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, journalitem, submessage_arena);
    }
    
  } else {
    
  }
  journalitem_ = journalitem;
  // @@protoc_insertion_point(field_set_allocated:journal.IndexItem.journalItem)
}

// int64 modifiedTimestamp = 2;
inline void IndexItem::clear_modifiedtimestamp() {
  modifiedtimestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IndexItem::modifiedtimestamp() const {
  // @@protoc_insertion_point(field_get:journal.IndexItem.modifiedTimestamp)
  return modifiedtimestamp_;
}
inline void IndexItem::set_modifiedtimestamp(::google::protobuf::int64 value) {
  
  modifiedtimestamp_ = value;
  // @@protoc_insertion_point(field_set:journal.IndexItem.modifiedTimestamp)
}

// -------------------------------------------------------------------

// Page

// .journal.JournalItem journalItem = 1;
inline bool Page::has_journalitem() const {
  return this != internal_default_instance() && journalitem_ != NULL;
}
inline void Page::clear_journalitem() {
  if (GetArenaNoVirtual() == NULL && journalitem_ != NULL) {
    delete journalitem_;
  }
  journalitem_ = NULL;
}
inline const ::journal::JournalItem& Page::journalitem() const {
  const ::journal::JournalItem* p = journalitem_;
  // @@protoc_insertion_point(field_get:journal.Page.journalItem)
  return p != NULL ? *p : *reinterpret_cast<const ::journal::JournalItem*>(
      &::journal::_JournalItem_default_instance_);
}
inline ::journal::JournalItem* Page::release_journalitem() {
  // @@protoc_insertion_point(field_release:journal.Page.journalItem)
  
  ::journal::JournalItem* temp = journalitem_;
  journalitem_ = NULL;
  return temp;
}
inline ::journal::JournalItem* Page::mutable_journalitem() {
  
  if (journalitem_ == NULL) {
    journalitem_ = new ::journal::JournalItem;
  }
  // @@protoc_insertion_point(field_mutable:journal.Page.journalItem)
  return journalitem_;
}
inline void Page::set_allocated_journalitem(::journal::JournalItem* journalitem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete journalitem_;
  }
  if (journalitem) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      journalitem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, journalitem, submessage_arena);
    }
    
  } else {
    
  }
  journalitem_ = journalitem;
  // @@protoc_insertion_point(field_set_allocated:journal.Page.journalItem)
}

// string content = 2;
inline void Page::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Page::content() const {
  // @@protoc_insertion_point(field_get:journal.Page.content)
  return content_.GetNoArena();
}
inline void Page::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:journal.Page.content)
}
#if LANG_CXX11
inline void Page::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:journal.Page.content)
}
#endif
inline void Page::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:journal.Page.content)
}
inline void Page::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:journal.Page.content)
}
inline ::std::string* Page::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:journal.Page.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Page::release_content() {
  // @@protoc_insertion_point(field_release:journal.Page.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Page::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:journal.Page.content)
}

// -------------------------------------------------------------------

// SearchResult

// repeated .common.UniqueId pageId = 1;
inline int SearchResult::pageid_size() const {
  return pageid_.size();
}
inline const ::common::UniqueId& SearchResult::pageid(int index) const {
  // @@protoc_insertion_point(field_get:journal.SearchResult.pageId)
  return pageid_.Get(index);
}
inline ::common::UniqueId* SearchResult::mutable_pageid(int index) {
  // @@protoc_insertion_point(field_mutable:journal.SearchResult.pageId)
  return pageid_.Mutable(index);
}
inline ::common::UniqueId* SearchResult::add_pageid() {
  // @@protoc_insertion_point(field_add:journal.SearchResult.pageId)
  return pageid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::common::UniqueId >*
SearchResult::mutable_pageid() {
  // @@protoc_insertion_point(field_mutable_list:journal.SearchResult.pageId)
  return &pageid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::common::UniqueId >&
SearchResult::pageid() const {
  // @@protoc_insertion_point(field_list:journal.SearchResult.pageId)
  return pageid_;
}

// repeated int64 position = 2;
inline int SearchResult::position_size() const {
  return position_.size();
}
inline void SearchResult::clear_position() {
  position_.Clear();
}
inline ::google::protobuf::int64 SearchResult::position(int index) const {
  // @@protoc_insertion_point(field_get:journal.SearchResult.position)
  return position_.Get(index);
}
inline void SearchResult::set_position(int index, ::google::protobuf::int64 value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:journal.SearchResult.position)
}
inline void SearchResult::add_position(::google::protobuf::int64 value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:journal.SearchResult.position)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SearchResult::position() const {
  // @@protoc_insertion_point(field_list:journal.SearchResult.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SearchResult::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:journal.SearchResult.position)
  return &position_;
}

// -------------------------------------------------------------------

// InsertFolderParams

// .common.UniqueId folderId = 1;
inline bool InsertFolderParams::has_folderid() const {
  return this != internal_default_instance() && folderid_ != NULL;
}
inline const ::common::UniqueId& InsertFolderParams::folderid() const {
  const ::common::UniqueId* p = folderid_;
  // @@protoc_insertion_point(field_get:journal.InsertFolderParams.folderId)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* InsertFolderParams::release_folderid() {
  // @@protoc_insertion_point(field_release:journal.InsertFolderParams.folderId)
  
  ::common::UniqueId* temp = folderid_;
  folderid_ = NULL;
  return temp;
}
inline ::common::UniqueId* InsertFolderParams::mutable_folderid() {
  
  if (folderid_ == NULL) {
    folderid_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:journal.InsertFolderParams.folderId)
  return folderid_;
}
inline void InsertFolderParams::set_allocated_folderid(::common::UniqueId* folderid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(folderid_);
  }
  if (folderid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      folderid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, folderid, submessage_arena);
    }
    
  } else {
    
  }
  folderid_ = folderid;
  // @@protoc_insertion_point(field_set_allocated:journal.InsertFolderParams.folderId)
}

// string title = 2;
inline void InsertFolderParams::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertFolderParams::title() const {
  // @@protoc_insertion_point(field_get:journal.InsertFolderParams.title)
  return title_.GetNoArena();
}
inline void InsertFolderParams::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:journal.InsertFolderParams.title)
}
#if LANG_CXX11
inline void InsertFolderParams::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:journal.InsertFolderParams.title)
}
#endif
inline void InsertFolderParams::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:journal.InsertFolderParams.title)
}
inline void InsertFolderParams::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:journal.InsertFolderParams.title)
}
inline ::std::string* InsertFolderParams::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:journal.InsertFolderParams.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertFolderParams::release_title() {
  // @@protoc_insertion_point(field_release:journal.InsertFolderParams.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertFolderParams::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:journal.InsertFolderParams.title)
}

// -------------------------------------------------------------------

// InsertPageParams

// .common.UniqueId folderId = 1;
inline bool InsertPageParams::has_folderid() const {
  return this != internal_default_instance() && folderid_ != NULL;
}
inline const ::common::UniqueId& InsertPageParams::folderid() const {
  const ::common::UniqueId* p = folderid_;
  // @@protoc_insertion_point(field_get:journal.InsertPageParams.folderId)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* InsertPageParams::release_folderid() {
  // @@protoc_insertion_point(field_release:journal.InsertPageParams.folderId)
  
  ::common::UniqueId* temp = folderid_;
  folderid_ = NULL;
  return temp;
}
inline ::common::UniqueId* InsertPageParams::mutable_folderid() {
  
  if (folderid_ == NULL) {
    folderid_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:journal.InsertPageParams.folderId)
  return folderid_;
}
inline void InsertPageParams::set_allocated_folderid(::common::UniqueId* folderid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(folderid_);
  }
  if (folderid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      folderid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, folderid, submessage_arena);
    }
    
  } else {
    
  }
  folderid_ = folderid;
  // @@protoc_insertion_point(field_set_allocated:journal.InsertPageParams.folderId)
}

// string title = 2;
inline void InsertPageParams::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertPageParams::title() const {
  // @@protoc_insertion_point(field_get:journal.InsertPageParams.title)
  return title_.GetNoArena();
}
inline void InsertPageParams::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:journal.InsertPageParams.title)
}
#if LANG_CXX11
inline void InsertPageParams::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:journal.InsertPageParams.title)
}
#endif
inline void InsertPageParams::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:journal.InsertPageParams.title)
}
inline void InsertPageParams::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:journal.InsertPageParams.title)
}
inline ::std::string* InsertPageParams::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:journal.InsertPageParams.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertPageParams::release_title() {
  // @@protoc_insertion_point(field_release:journal.InsertPageParams.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertPageParams::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:journal.InsertPageParams.title)
}

// string content = 3;
inline void InsertPageParams::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertPageParams::content() const {
  // @@protoc_insertion_point(field_get:journal.InsertPageParams.content)
  return content_.GetNoArena();
}
inline void InsertPageParams::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:journal.InsertPageParams.content)
}
#if LANG_CXX11
inline void InsertPageParams::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:journal.InsertPageParams.content)
}
#endif
inline void InsertPageParams::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:journal.InsertPageParams.content)
}
inline void InsertPageParams::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:journal.InsertPageParams.content)
}
inline ::std::string* InsertPageParams::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:journal.InsertPageParams.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertPageParams::release_content() {
  // @@protoc_insertion_point(field_release:journal.InsertPageParams.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertPageParams::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:journal.InsertPageParams.content)
}

// -------------------------------------------------------------------

// Index

// repeated .journal.IndexItem items = 1;
inline int Index::items_size() const {
  return items_.size();
}
inline void Index::clear_items() {
  items_.Clear();
}
inline const ::journal::IndexItem& Index::items(int index) const {
  // @@protoc_insertion_point(field_get:journal.Index.items)
  return items_.Get(index);
}
inline ::journal::IndexItem* Index::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:journal.Index.items)
  return items_.Mutable(index);
}
inline ::journal::IndexItem* Index::add_items() {
  // @@protoc_insertion_point(field_add:journal.Index.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::journal::IndexItem >*
Index::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:journal.Index.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::journal::IndexItem >&
Index::items() const {
  // @@protoc_insertion_point(field_list:journal.Index.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace journal

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_journal_2eproto__INCLUDED
