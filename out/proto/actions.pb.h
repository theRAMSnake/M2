// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actions.proto

#ifndef PROTOBUF_actions_2eproto__INCLUDED
#define PROTOBUF_actions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_actions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsActionInfoImpl();
void InitDefaultsActionInfo();
void InitDefaultsActionsListImpl();
void InitDefaultsActionsList();
inline void InitDefaults() {
  InitDefaultsActionInfo();
  InitDefaultsActionsList();
}
}  // namespace protobuf_actions_2eproto
namespace actions {
class ActionInfo;
class ActionInfoDefaultTypeInternal;
extern ActionInfoDefaultTypeInternal _ActionInfo_default_instance_;
class ActionsList;
class ActionsListDefaultTypeInternal;
extern ActionsListDefaultTypeInternal _ActionsList_default_instance_;
}  // namespace actions
namespace actions {

enum ActionType {
  Task = 0,
  Group = 1,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = Task;
const ActionType ActionType_MAX = Group;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
// ===================================================================

class ActionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:actions.ActionInfo) */ {
 public:
  ActionInfo();
  virtual ~ActionInfo();

  ActionInfo(const ActionInfo& from);

  inline ActionInfo& operator=(const ActionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionInfo(ActionInfo&& from) noexcept
    : ActionInfo() {
    *this = ::std::move(from);
  }

  inline ActionInfo& operator=(ActionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionInfo* internal_default_instance() {
    return reinterpret_cast<const ActionInfo*>(
               &_ActionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ActionInfo* other);
  friend void swap(ActionInfo& a, ActionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ActionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActionInfo& from);
  void MergeFrom(const ActionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .common.UniqueId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::common::UniqueId& id() const;
  ::common::UniqueId* release_id();
  ::common::UniqueId* mutable_id();
  void set_allocated_id(::common::UniqueId* id);

  // .common.UniqueId parentId = 2;
  bool has_parentid() const;
  void clear_parentid();
  static const int kParentIdFieldNumber = 2;
  const ::common::UniqueId& parentid() const;
  ::common::UniqueId* release_parentid();
  ::common::UniqueId* mutable_parentid();
  void set_allocated_parentid(::common::UniqueId* parentid);

  // .actions.ActionType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::actions::ActionType type() const;
  void set_type(::actions::ActionType value);

  // @@protoc_insertion_point(class_scope:actions.ActionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::common::UniqueId* id_;
  ::common::UniqueId* parentid_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_actions_2eproto::TableStruct;
  friend void ::protobuf_actions_2eproto::InitDefaultsActionInfoImpl();
};
// -------------------------------------------------------------------

class ActionsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:actions.ActionsList) */ {
 public:
  ActionsList();
  virtual ~ActionsList();

  ActionsList(const ActionsList& from);

  inline ActionsList& operator=(const ActionsList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionsList(ActionsList&& from) noexcept
    : ActionsList() {
    *this = ::std::move(from);
  }

  inline ActionsList& operator=(ActionsList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionsList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionsList* internal_default_instance() {
    return reinterpret_cast<const ActionsList*>(
               &_ActionsList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ActionsList* other);
  friend void swap(ActionsList& a, ActionsList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionsList* New() const PROTOBUF_FINAL { return New(NULL); }

  ActionsList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActionsList& from);
  void MergeFrom(const ActionsList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActionsList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .actions.ActionInfo list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::actions::ActionInfo& list(int index) const;
  ::actions::ActionInfo* mutable_list(int index);
  ::actions::ActionInfo* add_list();
  ::google::protobuf::RepeatedPtrField< ::actions::ActionInfo >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::actions::ActionInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:actions.ActionsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::actions::ActionInfo > list_;
  mutable int _cached_size_;
  friend struct ::protobuf_actions_2eproto::TableStruct;
  friend void ::protobuf_actions_2eproto::InitDefaultsActionsListImpl();
};
// ===================================================================

class ActionsService_Stub;

class ActionsService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ActionsService() {};
 public:
  virtual ~ActionsService();

  typedef ActionsService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetChildren(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::actions::ActionsList* response,
                       ::google::protobuf::Closure* done);
  virtual void GetParentlessElements(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::actions::ActionsList* response,
                       ::google::protobuf::Closure* done);
  virtual void AddElement(::google::protobuf::RpcController* controller,
                       const ::actions::ActionInfo* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteElement(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  virtual void EditElement(::google::protobuf::RpcController* controller,
                       const ::actions::ActionInfo* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ActionsService);
};

class ActionsService_Stub : public ActionsService {
 public:
  ActionsService_Stub(::google::protobuf::RpcChannel* channel);
  ActionsService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ActionsService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ActionsService ------------------------------------------

  void GetChildren(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::actions::ActionsList* response,
                       ::google::protobuf::Closure* done);
  void GetParentlessElements(::google::protobuf::RpcController* controller,
                       const ::common::EmptyMessage* request,
                       ::actions::ActionsList* response,
                       ::google::protobuf::Closure* done);
  void AddElement(::google::protobuf::RpcController* controller,
                       const ::actions::ActionInfo* request,
                       ::common::UniqueId* response,
                       ::google::protobuf::Closure* done);
  void DeleteElement(::google::protobuf::RpcController* controller,
                       const ::common::UniqueId* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
  void EditElement(::google::protobuf::RpcController* controller,
                       const ::actions::ActionInfo* request,
                       ::common::OperationResultMessage* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ActionsService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActionInfo

// .common.UniqueId id = 1;
inline bool ActionInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::UniqueId& ActionInfo::id() const {
  const ::common::UniqueId* p = id_;
  // @@protoc_insertion_point(field_get:actions.ActionInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* ActionInfo::release_id() {
  // @@protoc_insertion_point(field_release:actions.ActionInfo.id)
  
  ::common::UniqueId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::UniqueId* ActionInfo::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:actions.ActionInfo.id)
  return id_;
}
inline void ActionInfo::set_allocated_id(::common::UniqueId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:actions.ActionInfo.id)
}

// .common.UniqueId parentId = 2;
inline bool ActionInfo::has_parentid() const {
  return this != internal_default_instance() && parentid_ != NULL;
}
inline const ::common::UniqueId& ActionInfo::parentid() const {
  const ::common::UniqueId* p = parentid_;
  // @@protoc_insertion_point(field_get:actions.ActionInfo.parentId)
  return p != NULL ? *p : *reinterpret_cast<const ::common::UniqueId*>(
      &::common::_UniqueId_default_instance_);
}
inline ::common::UniqueId* ActionInfo::release_parentid() {
  // @@protoc_insertion_point(field_release:actions.ActionInfo.parentId)
  
  ::common::UniqueId* temp = parentid_;
  parentid_ = NULL;
  return temp;
}
inline ::common::UniqueId* ActionInfo::mutable_parentid() {
  
  if (parentid_ == NULL) {
    parentid_ = new ::common::UniqueId;
  }
  // @@protoc_insertion_point(field_mutable:actions.ActionInfo.parentId)
  return parentid_;
}
inline void ActionInfo::set_allocated_parentid(::common::UniqueId* parentid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parentid_);
  }
  if (parentid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parentid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parentid, submessage_arena);
    }
    
  } else {
    
  }
  parentid_ = parentid;
  // @@protoc_insertion_point(field_set_allocated:actions.ActionInfo.parentId)
}

// string title = 3;
inline void ActionInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActionInfo::title() const {
  // @@protoc_insertion_point(field_get:actions.ActionInfo.title)
  return title_.GetNoArena();
}
inline void ActionInfo::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:actions.ActionInfo.title)
}
#if LANG_CXX11
inline void ActionInfo::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:actions.ActionInfo.title)
}
#endif
inline void ActionInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:actions.ActionInfo.title)
}
inline void ActionInfo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:actions.ActionInfo.title)
}
inline ::std::string* ActionInfo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:actions.ActionInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionInfo::release_title() {
  // @@protoc_insertion_point(field_release:actions.ActionInfo.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:actions.ActionInfo.title)
}

// string description = 4;
inline void ActionInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActionInfo::description() const {
  // @@protoc_insertion_point(field_get:actions.ActionInfo.description)
  return description_.GetNoArena();
}
inline void ActionInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:actions.ActionInfo.description)
}
#if LANG_CXX11
inline void ActionInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:actions.ActionInfo.description)
}
#endif
inline void ActionInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:actions.ActionInfo.description)
}
inline void ActionInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:actions.ActionInfo.description)
}
inline ::std::string* ActionInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:actions.ActionInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionInfo::release_description() {
  // @@protoc_insertion_point(field_release:actions.ActionInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:actions.ActionInfo.description)
}

// .actions.ActionType type = 5;
inline void ActionInfo::clear_type() {
  type_ = 0;
}
inline ::actions::ActionType ActionInfo::type() const {
  // @@protoc_insertion_point(field_get:actions.ActionInfo.type)
  return static_cast< ::actions::ActionType >(type_);
}
inline void ActionInfo::set_type(::actions::ActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:actions.ActionInfo.type)
}

// -------------------------------------------------------------------

// ActionsList

// repeated .actions.ActionInfo list = 1;
inline int ActionsList::list_size() const {
  return list_.size();
}
inline void ActionsList::clear_list() {
  list_.Clear();
}
inline const ::actions::ActionInfo& ActionsList::list(int index) const {
  // @@protoc_insertion_point(field_get:actions.ActionsList.list)
  return list_.Get(index);
}
inline ::actions::ActionInfo* ActionsList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ActionsList.list)
  return list_.Mutable(index);
}
inline ::actions::ActionInfo* ActionsList::add_list() {
  // @@protoc_insertion_point(field_add:actions.ActionsList.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::actions::ActionInfo >*
ActionsList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:actions.ActionsList.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::actions::ActionInfo >&
ActionsList::list() const {
  // @@protoc_insertion_point(field_list:actions.ActionsList.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace actions

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::actions::ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::actions::ActionType>() {
  return ::actions::ActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_actions_2eproto__INCLUDED
